local BLAZED = {};

if not gethui then
	function gethui()
		return game:GetService("CoreGui")
	end
end

-- Blazed
BLAZED["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
BLAZED["1"]["Enabled"] = false;
BLAZED["1"]["Name"] = [[Blazed]];
BLAZED["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
BLAZED["1"]["ResetOnSpawn"] = false;

-- Blazed.BlazedFrame
BLAZED["2"] = Instance.new("Frame", BLAZED["1"]);
BLAZED["2"]["BorderSizePixel"] = 0;
BLAZED["2"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["2"]["Size"] = UDim2.new(0, 528, 0, 289);
BLAZED["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["2"]["Position"] = UDim2.new(0.5, -264, 0.5, -144);
BLAZED["2"]["Name"] = [[BlazedFrame]];

-- Blazed.BlazedFrame.SideTabs
BLAZED["3"] = Instance.new("Frame", BLAZED["2"]);
BLAZED["3"]["BorderSizePixel"] = 0;
BLAZED["3"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["3"]["Size"] = UDim2.new(0, 120, 0, 289);
BLAZED["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["3"]["Name"] = [[SideTabs]];

-- Blazed.BlazedFrame.SideTabs.Frame
BLAZED["4"] = Instance.new("Frame", BLAZED["3"]);
BLAZED["4"]["BorderSizePixel"] = 0;
BLAZED["4"]["BackgroundColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["4"]["Size"] = UDim2.new(0, 95, 0, 1);
BLAZED["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["4"]["Position"] = UDim2.new(0.09824703633785248, 0, 0.09776701778173447, 0);

-- Blazed.BlazedFrame.SideTabs.Title
BLAZED["5"] = Instance.new("TextLabel", BLAZED["3"]);
BLAZED["5"]["BorderSizePixel"] = 0;
BLAZED["5"]["RichText"] = true;
BLAZED["5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["5"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["5"]["TextSize"] = 20;
BLAZED["5"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["5"]["Size"] = UDim2.new(0, 97, 0, 22);
BLAZED["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["5"]["Text"] = [[Blazed]];
BLAZED["5"]["Name"] = [[Title]];
BLAZED["5"]["BackgroundTransparency"] = 1;
BLAZED["5"]["Position"] = UDim2.new(0.07480417937040329, 0, 0.021642453968524933, 0);

-- Blazed.BlazedFrame.SideTabs.Frame
BLAZED["6"] = Instance.new("Frame", BLAZED["3"]);
BLAZED["6"]["BorderSizePixel"] = 0;
BLAZED["6"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["6"]["Size"] = UDim2.new(0, 12, 0, 289);
BLAZED["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["6"]["Position"] = UDim2.new(0.8999999761581421, 0, 0, 0);

-- Blazed.BlazedFrame.SideTabs.ScrollingFrame
BLAZED["7"] = Instance.new("ScrollingFrame", BLAZED["3"]);
BLAZED["7"]["Active"] = true;
BLAZED["7"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
BLAZED["7"]["BorderSizePixel"] = 0;
BLAZED["7"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
BLAZED["7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["7"]["BackgroundTransparency"] = 1;
BLAZED["7"]["Size"] = UDim2.new(0, 108, 0, 247);
BLAZED["7"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["7"]["ClipsDescendants"] = false;
BLAZED["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["7"]["ScrollBarThickness"] = 0;
BLAZED["7"]["Position"] = UDim2.new(0, 0, 0.13494808971881866, 0);

-- Blazed.BlazedFrame.SideTabs.ScrollingFrame.UIListLayout
BLAZED["8"] = Instance.new("UIListLayout", BLAZED["7"]);
BLAZED["8"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
BLAZED["8"]["Padding"] = UDim.new(0, 5);
BLAZED["8"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- Blazed.BlazedFrame.SideTabs.UICorner
BLAZED["9"] = Instance.new("UICorner", BLAZED["3"]);
BLAZED["9"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.BlazedFrame.Shadow
BLAZED["a"] = Instance.new("ImageLabel", BLAZED["2"]);
BLAZED["a"]["ZIndex"] = 0;
BLAZED["a"]["SliceCenter"] = Rect.new(18, 18, 20, 20);
BLAZED["a"]["ScaleType"] = Enum.ScaleType.Slice;
BLAZED["a"]["ImageColor3"] = Color3.fromRGB(15, 15, 15);
BLAZED["a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["a"]["Image"] = [[http://www.roblox.com/asset/?id=12194054034]];
BLAZED["a"]["Size"] = UDim2.new(1, 20, 1, 20);
BLAZED["a"]["Name"] = [[Shadow]];
BLAZED["a"]["BackgroundTransparency"] = 1;
BLAZED["a"]["Position"] = UDim2.new(0.5, 0, 0.49653980135917664, 0);

-- Blazed.BlazedFrame.Shadow.Gradient
BLAZED["b"] = Instance.new("UIGradient", BLAZED["a"]);
BLAZED["b"]["Name"] = [[Gradient]];
BLAZED["b"]["Rotation"] = 90;

-- Blazed.BlazedFrame.ImageLabel
BLAZED["c"] = Instance.new("ImageLabel", BLAZED["2"]);
BLAZED["c"]["BorderSizePixel"] = 0;
BLAZED["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["c"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["c"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["c"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["c"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["c"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["c"]["BackgroundTransparency"] = 1;
BLAZED["c"]["Position"] = UDim2.new(4.0666656494140625, 0, 0.5259514451026917, 0);

-- Blazed.BlazedFrame.UICorner
BLAZED["d"] = Instance.new("UICorner", BLAZED["2"]);
BLAZED["d"]["CornerRadius"] = UDim.new(0, 12);

-- Blazed.BlazedFrame.Tabs
BLAZED["e"] = Instance.new("Frame", BLAZED["2"]);
BLAZED["e"]["BorderSizePixel"] = 0;
BLAZED["e"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["e"]["Size"] = UDim2.new(0, 408, 0, 288);
BLAZED["e"]["ClipsDescendants"] = true;
BLAZED["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["e"]["Position"] = UDim2.new(0.22727273404598236, 0, 0, 0);
BLAZED["e"]["Name"] = [[Tabs]];

-- Blazed.BlazedFrame.Tabs.UICorner
BLAZED["f"] = Instance.new("UICorner", BLAZED["e"]);
BLAZED["f"]["CornerRadius"] = UDim.new(0, 12);

-- Blazed.BlazedFrame.Tabs.InfoViewer
BLAZED["10"] = Instance.new("Frame", BLAZED["e"]);
BLAZED["10"]["ZIndex"] = 10;
BLAZED["10"]["BorderSizePixel"] = 0;
BLAZED["10"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["10"]["LayoutOrder"] = 10;
BLAZED["10"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["10"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["10"]["Position"] = UDim2.new(0.01600000075995922, 0, 1, 0);
BLAZED["10"]["Name"] = [[InfoViewer]];

-- Blazed.BlazedFrame.Tabs.InfoViewer.UICorner
BLAZED["11"] = Instance.new("UICorner", BLAZED["10"]);
BLAZED["11"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.BlazedFrame.Tabs.InfoViewer.TextLabel
BLAZED["12"] = Instance.new("TextLabel", BLAZED["10"]);
BLAZED["12"]["BorderSizePixel"] = 0;
BLAZED["12"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["12"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["12"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["12"]["TextSize"] = 17;
BLAZED["12"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["12"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["12"]["Text"] = [[Info]];
BLAZED["12"]["BackgroundTransparency"] = 1;
BLAZED["12"]["Position"] = UDim2.new(0.02604166604578495, 0, 0.10810811072587967, 0);

-- Blazed.BlazedFrame.Landing
BLAZED["13"] = Instance.new("Frame", BLAZED["2"]);
BLAZED["13"]["BorderSizePixel"] = 0;
BLAZED["13"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["13"]["Size"] = UDim2.new(0, 408, 0, 289);
BLAZED["13"]["ClipsDescendants"] = true;
BLAZED["13"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["13"]["Position"] = UDim2.new(0.2270762324333191, 0, -0.0003840327262878418, 0);
BLAZED["13"]["Name"] = [[Landing]];

-- Blazed.BlazedFrame.Landing.UICorner
BLAZED["14"] = Instance.new("UICorner", BLAZED["13"]);
BLAZED["14"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.BlazedFrame.Landing.DisplayName
BLAZED["15"] = Instance.new("TextLabel", BLAZED["13"]);
BLAZED["15"]["BorderSizePixel"] = 0;
BLAZED["15"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["15"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["15"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Heavy, Enum.FontStyle.Normal);
BLAZED["15"]["TextSize"] = 25;
BLAZED["15"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["15"]["Size"] = UDim2.new(0, 367, 0, 22);
BLAZED["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["15"]["Text"] = [[NaN]];
BLAZED["15"]["Name"] = [[DisplayName]];
BLAZED["15"]["BackgroundTransparency"] = 1;
BLAZED["15"]["Position"] = UDim2.new(0.2549019455909729, 0, 0.09546848386526108, 0);

-- Blazed.BlazedFrame.Landing.Username
BLAZED["16"] = Instance.new("TextLabel", BLAZED["13"]);
BLAZED["16"]["BorderSizePixel"] = 0;
BLAZED["16"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["16"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["16"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Heavy, Enum.FontStyle.Normal);
BLAZED["16"]["TextSize"] = 15;
BLAZED["16"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["16"]["Size"] = UDim2.new(0, 367, 0, 18);
BLAZED["16"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["16"]["Text"] = [[@NaN]];
BLAZED["16"]["Name"] = [[Username]];
BLAZED["16"]["BackgroundTransparency"] = 1;
BLAZED["16"]["Position"] = UDim2.new(0.2549019753932953, 0, 0.17301037907600403, 0);

-- Blazed.BlazedFrame.Landing.Profile
BLAZED["17"] = Instance.new("ImageLabel", BLAZED["13"]);
BLAZED["17"]["BorderSizePixel"] = 0;
BLAZED["17"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["17"]["Image"] = [[rbxasset://textures/ui/GuiImagePlaceholder.png]];
BLAZED["17"]["Size"] = UDim2.new(0, 90, 0, 90);
BLAZED["17"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["17"]["Name"] = [[Profile]];
BLAZED["17"]["Position"] = UDim2.new(0.01715686358511448, 0, 0.024221453815698624, 0);

-- Blazed.BlazedFrame.Landing.Profile.UICorner
BLAZED["18"] = Instance.new("UICorner", BLAZED["17"]);
BLAZED["18"]["CornerRadius"] = UDim.new(0, 50);

-- Blazed.BlazedFrame.Landing.Changelogs
BLAZED["19"] = Instance.new("Frame", BLAZED["13"]);
BLAZED["19"]["BorderSizePixel"] = 0;
BLAZED["19"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["19"]["Size"] = UDim2.new(0, 387, 0, 118);
BLAZED["19"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["19"]["Position"] = UDim2.new(0.02450980432331562, 0, 0.5636495351791382, 0);
BLAZED["19"]["Name"] = [[Changelogs]];

-- Blazed.BlazedFrame.Landing.Changelogs.UICorner
BLAZED["1a"] = Instance.new("UICorner", BLAZED["19"]);
BLAZED["1a"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.BlazedFrame.Landing.Changelogs.TextLabel
BLAZED["1b"] = Instance.new("TextLabel", BLAZED["19"]);
BLAZED["1b"]["BorderSizePixel"] = 0;
BLAZED["1b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["1b"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
BLAZED["1b"]["TextSize"] = 17;
BLAZED["1b"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["1b"]["Size"] = UDim2.new(0, 200, 0, 50);
BLAZED["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["1b"]["Text"] = [[Changelogs]];
BLAZED["1b"]["BackgroundTransparency"] = 1;
BLAZED["1b"]["Position"] = UDim2.new(0.2368421107530594, 0, -0.0760233923792839, 0);

-- Blazed.BlazedFrame.Landing.Changelogs.ScrollingFrame
BLAZED["1c"] = Instance.new("ScrollingFrame", BLAZED["19"]);
BLAZED["1c"]["Active"] = true;
BLAZED["1c"]["BorderSizePixel"] = 0;
BLAZED["1c"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
BLAZED["1c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["1c"]["BackgroundTransparency"] = 1;
BLAZED["1c"]["Size"] = UDim2.new(0, 386, 0, 89);
BLAZED["1c"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["1c"]["ScrollBarThickness"] = 0;
BLAZED["1c"]["Position"] = UDim2.new(0.002583979396149516, 0, 0.24576270580291748, 0);

-- Blazed.BlazedFrame.Landing.Changelogs.ScrollingFrame.UIListLayout
BLAZED["1d"] = Instance.new("UIListLayout", BLAZED["1c"]);
BLAZED["1d"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- Blazed.BlazedFrame.Landing.Changelogs.ScrollingFrame.TextLabel
BLAZED["1e"] = Instance.new("TextLabel", BLAZED["1c"]);
BLAZED["1e"]["BorderSizePixel"] = 0;
BLAZED["1e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["1e"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
BLAZED["1e"]["TextSize"] = 14;
BLAZED["1e"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["1e"]["Size"] = UDim2.new(0, 379, 0, 21);
BLAZED["1e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["1e"]["Text"] = [[# Nothing]];
BLAZED["1e"]["BackgroundTransparency"] = 1;
BLAZED["1e"]["Position"] = UDim2.new(7.906108123734157e-08, 0, 0, 0);

-- Blazed.BlazedFrame.Landing.Version
BLAZED["1f"] = Instance.new("Frame", BLAZED["13"]);
BLAZED["1f"]["BorderSizePixel"] = 0;
BLAZED["1f"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["1f"]["Size"] = UDim2.new(0, 190, 0, 48);
BLAZED["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["1f"]["Position"] = UDim2.new(0.02450980432331562, 0, 0.38328707218170166, 0);
BLAZED["1f"]["Name"] = [[Version]];

-- Blazed.BlazedFrame.Landing.Version.UICorner
BLAZED["20"] = Instance.new("UICorner", BLAZED["1f"]);
BLAZED["20"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.BlazedFrame.Landing.Version.Title
BLAZED["21"] = Instance.new("TextLabel", BLAZED["1f"]);
BLAZED["21"]["BorderSizePixel"] = 0;
BLAZED["21"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["21"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["21"]["TextSize"] = 15;
BLAZED["21"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["21"]["Size"] = UDim2.new(0, 73, 0, 21);
BLAZED["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["21"]["Text"] = [[Version]];
BLAZED["21"]["Name"] = [[Title]];
BLAZED["21"]["BackgroundTransparency"] = 1;
BLAZED["21"]["Position"] = UDim2.new(-0.015789473429322243, 0, 0, 0);

-- Blazed.BlazedFrame.Landing.Version.TextLabel
BLAZED["22"] = Instance.new("TextLabel", BLAZED["1f"]);
BLAZED["22"]["BorderSizePixel"] = 0;
BLAZED["22"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["22"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["22"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Heavy, Enum.FontStyle.Normal);
BLAZED["22"]["TextSize"] = 20;
BLAZED["22"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["22"]["Size"] = UDim2.new(0, 187, 0, 19);
BLAZED["22"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["22"]["Text"] = [[V1.0.0]];
BLAZED["22"]["BackgroundTransparency"] = 1;
BLAZED["22"]["Position"] = UDim2.new(0.05263157933950424, 0, 0.3333333432674408, 0);

-- Blazed.BlazedFrame.Landing.Server
BLAZED["23"] = Instance.new("Frame", BLAZED["13"]);
BLAZED["23"]["BorderSizePixel"] = 0;
BLAZED["23"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["23"]["Size"] = UDim2.new(0, 190, 0, 48);
BLAZED["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["23"]["Position"] = UDim2.new(0.5073529481887817, 0, 0.38328707218170166, 0);
BLAZED["23"]["Name"] = [[Server]];

-- Blazed.BlazedFrame.Landing.Server.UICorner
BLAZED["24"] = Instance.new("UICorner", BLAZED["23"]);
BLAZED["24"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.BlazedFrame.Landing.Server.Title
BLAZED["25"] = Instance.new("TextLabel", BLAZED["23"]);
BLAZED["25"]["BorderSizePixel"] = 0;
BLAZED["25"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["25"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["25"]["TextSize"] = 15;
BLAZED["25"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["25"]["Size"] = UDim2.new(0, 112, 0, 43);
BLAZED["25"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["25"]["Text"] = [[Discord]];
BLAZED["25"]["Name"] = [[Title]];
BLAZED["25"]["BackgroundTransparency"] = 1;
BLAZED["25"]["Position"] = UDim2.new(-0.09473687410354614, 0, -0.16666662693023682, 0);

-- Blazed.BlazedFrame.Landing.Server.TextLabel
BLAZED["26"] = Instance.new("TextLabel", BLAZED["23"]);
BLAZED["26"]["BorderSizePixel"] = 0;
BLAZED["26"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["26"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["26"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Heavy, Enum.FontStyle.Normal);
BLAZED["26"]["TextSize"] = 20;
BLAZED["26"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["26"]["Size"] = UDim2.new(0, 190, 0, 15);
BLAZED["26"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["26"]["Text"] = [[.gg/dhlockers]];
BLAZED["26"]["BackgroundTransparency"] = 1;
BLAZED["26"]["Position"] = UDim2.new(0.057894736528396606, 0, 0.4375, 0);

-- Blazed.Library
BLAZED["27"] = Instance.new("ModuleScript", BLAZED["1"]);
BLAZED["27"]["Name"] = [[Library]];

-- Blazed.Reserved
BLAZED["28"] = Instance.new("Folder", BLAZED["1"]);
BLAZED["28"]["Name"] = [[Reserved]];

-- Blazed.Reserved.Tab
BLAZED["29"] = Instance.new("ScrollingFrame", BLAZED["28"]);
BLAZED["29"]["Active"] = true;
BLAZED["29"]["BorderSizePixel"] = 0;
BLAZED["29"]["CanvasSize"] = UDim2.new(0, 0, 0, 1);
BLAZED["29"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["29"]["VerticalScrollBarInset"] = Enum.ScrollBarInset.ScrollBar;
BLAZED["29"]["Size"] = UDim2.new(0, 406, 0, 271);
BLAZED["29"]["ScrollBarImageColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["29"]["ClipsDescendants"] = false;
BLAZED["29"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["29"]["ScrollBarThickness"] = 0;
BLAZED["29"]["Position"] = UDim2.new(0, 0, 0.02593645639717579, 0);
BLAZED["29"]["Visible"] = false;
BLAZED["29"]["Name"] = [[Tab]];

-- Blazed.Reserved.Tab.UIListLayout
BLAZED["2a"] = Instance.new("UIListLayout", BLAZED["29"]);
BLAZED["2a"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
BLAZED["2a"]["Padding"] = UDim.new(0, 5);
BLAZED["2a"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- Blazed.Reserved.TabButton
BLAZED["2b"] = Instance.new("TextButton", BLAZED["28"]);
BLAZED["2b"]["BorderSizePixel"] = 0;
BLAZED["2b"]["AutoButtonColor"] = false;
BLAZED["2b"]["BackgroundColor3"] = Color3.fromRGB(14, 14, 14);
BLAZED["2b"]["TextSize"] = 15;
BLAZED["2b"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["2b"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["2b"]["Visible"] = false;
BLAZED["2b"]["Size"] = UDim2.new(0, 95, 0, 22);
BLAZED["2b"]["Name"] = [[TabButton]];
BLAZED["2b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["2b"]["Text"] = [[Tab]];
BLAZED["2b"]["Position"] = UDim2.new(0.08466669917106628, 0, 0.1306539922952652, 0);

-- Blazed.Reserved.TabButton.UICorner
BLAZED["2c"] = Instance.new("UICorner", BLAZED["2b"]);
BLAZED["2c"]["CornerRadius"] = UDim.new(0, 6);

-- Blazed.Reserved.TabButton.UIStroke
BLAZED["2d"] = Instance.new("UIStroke", BLAZED["2b"]);
BLAZED["2d"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["2d"]["Transparency"] = 1;
BLAZED["2d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements
BLAZED["2e"] = Instance.new("Folder", BLAZED["28"]);
BLAZED["2e"]["Name"] = [[SectionElements]];

-- Blazed.Reserved.SectionElements.Toggle
BLAZED["2f"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["2f"]["BorderSizePixel"] = 0;
BLAZED["2f"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["2f"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["2f"]["ClipsDescendants"] = true;
BLAZED["2f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["2f"]["Visible"] = false;
BLAZED["2f"]["Name"] = [[Toggle]];

-- Blazed.Reserved.SectionElements.Toggle.UICorner
BLAZED["30"] = Instance.new("UICorner", BLAZED["2f"]);
BLAZED["30"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Toggle.TextLabel
BLAZED["31"] = Instance.new("TextLabel", BLAZED["2f"]);
BLAZED["31"]["BorderSizePixel"] = 0;
BLAZED["31"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["31"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["31"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["31"]["TextSize"] = 17;
BLAZED["31"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["31"]["Size"] = UDim2.new(0, 82, 0, 28);
BLAZED["31"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["31"]["Text"] = [[Toggle]];
BLAZED["31"]["BackgroundTransparency"] = 1;
BLAZED["31"]["Position"] = UDim2.new(0.0234375, 0, 0.0810810774564743, 0);

-- Blazed.Reserved.SectionElements.Toggle.TextButton
BLAZED["32"] = Instance.new("TextButton", BLAZED["2f"]);
BLAZED["32"]["BorderSizePixel"] = 0;
BLAZED["32"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["32"]["TextSize"] = 17;
BLAZED["32"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["32"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["32"]["Size"] = UDim2.new(0, 384, 0, 33);
BLAZED["32"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["32"]["Text"] = [[]];
BLAZED["32"]["Position"] = UDim2.new(0.0023892719764262438, 0, 0.08108190447092056, 0);
BLAZED["32"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Toggle.TextButton.UICorner
BLAZED["33"] = Instance.new("UICorner", BLAZED["32"]);
BLAZED["33"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Toggle.Frame
BLAZED["34"] = Instance.new("Frame", BLAZED["2f"]);
BLAZED["34"]["BorderSizePixel"] = 0;
BLAZED["34"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
BLAZED["34"]["Size"] = UDim2.new(0, 373, 0, 1);
BLAZED["34"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["34"]["Position"] = UDim2.new(0.01600000075995922, 0, 0.9599999785423279, 0);

-- Blazed.Reserved.SectionElements.Toggle.Frame.UICorner
BLAZED["35"] = Instance.new("UICorner", BLAZED["34"]);
BLAZED["35"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Toggle.Info
BLAZED["36"] = Instance.new("ImageButton", BLAZED["2f"]);
BLAZED["36"]["BorderSizePixel"] = 0;
BLAZED["36"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["36"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["36"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["36"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["36"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["36"]["Name"] = [[Info]];
BLAZED["36"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["36"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["36"]["Position"] = UDim2.new(0.9348958134651184, 0, 0.18918919563293457, 0);
BLAZED["36"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Toggle.UIStroke
BLAZED["37"] = Instance.new("UIStroke", BLAZED["2f"]);
BLAZED["37"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["37"]["Transparency"] = 1;
BLAZED["37"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.Textbox
BLAZED["38"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["38"]["BorderSizePixel"] = 0;
BLAZED["38"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["38"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["38"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["38"]["Visible"] = false;
BLAZED["38"]["Name"] = [[Textbox]];

-- Blazed.Reserved.SectionElements.Textbox.UICorner
BLAZED["39"] = Instance.new("UICorner", BLAZED["38"]);
BLAZED["39"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Textbox.TextLabel
BLAZED["3a"] = Instance.new("TextLabel", BLAZED["38"]);
BLAZED["3a"]["BorderSizePixel"] = 0;
BLAZED["3a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["3a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["3a"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["3a"]["TextSize"] = 17;
BLAZED["3a"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["3a"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["3a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["3a"]["Text"] = [[Textbox]];
BLAZED["3a"]["BackgroundTransparency"] = 1;
BLAZED["3a"]["Position"] = UDim2.new(0.02604166604578495, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Textbox.TextBox
BLAZED["3b"] = Instance.new("TextBox", BLAZED["38"]);
BLAZED["3b"]["PlaceholderColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["3b"]["BorderSizePixel"] = 0;
BLAZED["3b"]["TextSize"] = 15;
BLAZED["3b"]["TextWrapped"] = true;
BLAZED["3b"]["TextScaled"] = true;
BLAZED["3b"]["BackgroundColor3"] = Color3.fromRGB(9, 9, 9);
BLAZED["3b"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["3b"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["3b"]["Size"] = UDim2.new(0, 80, 0, 24);
BLAZED["3b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["3b"]["Text"] = [[]];
BLAZED["3b"]["Position"] = UDim2.new(0.7158905863761902, 0, 0.1621621549129486, 0);

-- Blazed.Reserved.SectionElements.Textbox.TextBox.UICorner
BLAZED["3c"] = Instance.new("UICorner", BLAZED["3b"]);


-- Blazed.Reserved.SectionElements.Textbox.TextBox.UIStroke
BLAZED["3d"] = Instance.new("UIStroke", BLAZED["3b"]);
BLAZED["3d"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["3d"]["Transparency"] = 1;
BLAZED["3d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.Textbox.Info
BLAZED["3e"] = Instance.new("ImageButton", BLAZED["38"]);
BLAZED["3e"]["BorderSizePixel"] = 0;
BLAZED["3e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["3e"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["3e"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["3e"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["3e"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["3e"]["Name"] = [[Info]];
BLAZED["3e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["3e"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["3e"]["Position"] = UDim2.new(0.9270833134651184, 0, 0.18918919563293457, 0);
BLAZED["3e"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Textbox.UIStroke
BLAZED["3f"] = Instance.new("UIStroke", BLAZED["38"]);
BLAZED["3f"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["3f"]["Transparency"] = 1;
BLAZED["3f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.Slider
BLAZED["40"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["40"]["BorderSizePixel"] = 0;
BLAZED["40"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["40"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["40"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["40"]["Visible"] = false;
BLAZED["40"]["Name"] = [[Slider]];

-- Blazed.Reserved.SectionElements.Slider.UICorner
BLAZED["41"] = Instance.new("UICorner", BLAZED["40"]);
BLAZED["41"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Slider.TextLabel
BLAZED["42"] = Instance.new("TextLabel", BLAZED["40"]);
BLAZED["42"]["BorderSizePixel"] = 0;
BLAZED["42"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["42"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["42"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["42"]["TextSize"] = 17;
BLAZED["42"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["42"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["42"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["42"]["Text"] = [[Slider]];
BLAZED["42"]["BackgroundTransparency"] = 1;
BLAZED["42"]["Position"] = UDim2.new(0.02604166604578495, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Slider.Frame
BLAZED["43"] = Instance.new("Frame", BLAZED["40"]);
BLAZED["43"]["BorderSizePixel"] = 0;
BLAZED["43"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["43"]["Size"] = UDim2.new(0, 177, 0, 15);
BLAZED["43"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["43"]["Position"] = UDim2.new(0.4557291567325592, 0, 0.29729729890823364, 0);

-- Blazed.Reserved.SectionElements.Slider.Frame.UICorner
BLAZED["44"] = Instance.new("UICorner", BLAZED["43"]);
BLAZED["44"]["CornerRadius"] = UDim.new(0, 50);

-- Blazed.Reserved.SectionElements.Slider.Frame.Frame
BLAZED["45"] = Instance.new("Frame", BLAZED["43"]);
BLAZED["45"]["BorderSizePixel"] = 0;
BLAZED["45"]["BackgroundColor3"] = Color3.fromRGB(23, 23, 23);
BLAZED["45"]["Size"] = UDim2.new(0, 0, 1, 0);
BLAZED["45"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);

-- Blazed.Reserved.SectionElements.Slider.Frame.Frame.UICorner
BLAZED["46"] = Instance.new("UICorner", BLAZED["45"]);
BLAZED["46"]["CornerRadius"] = UDim.new(0, 50);

-- Blazed.Reserved.SectionElements.Slider.Info
BLAZED["47"] = Instance.new("ImageButton", BLAZED["40"]);
BLAZED["47"]["BorderSizePixel"] = 0;
BLAZED["47"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["47"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["47"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["47"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["47"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["47"]["Name"] = [[Info]];
BLAZED["47"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["47"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["47"]["Position"] = UDim2.new(0.9296875, 0, 0.18918919563293457, 0);
BLAZED["47"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Slider.Value
BLAZED["48"] = Instance.new("TextLabel", BLAZED["40"]);
BLAZED["48"]["BorderSizePixel"] = 0;
BLAZED["48"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["48"]["TextXAlignment"] = Enum.TextXAlignment.Right;
BLAZED["48"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["48"]["TextSize"] = 14;
BLAZED["48"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["48"]["Size"] = UDim2.new(0, 69, 0, 28);
BLAZED["48"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["48"]["Text"] = [[0]];
BLAZED["48"]["Name"] = [[Value]];
BLAZED["48"]["BackgroundTransparency"] = 1;
BLAZED["48"]["Position"] = UDim2.new(0.2473958283662796, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Slider.Trigger
BLAZED["49"] = Instance.new("TextButton", BLAZED["40"]);
BLAZED["49"]["Active"] = false;
BLAZED["49"]["BorderSizePixel"] = 0;
BLAZED["49"]["AutoButtonColor"] = false;
BLAZED["49"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["49"]["Selectable"] = false;
BLAZED["49"]["Size"] = UDim2.new(0, 177, 0, 15);
BLAZED["49"]["Name"] = [[Trigger]];
BLAZED["49"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["49"]["Text"] = [[]];
BLAZED["49"]["Position"] = UDim2.new(0.4557291567325592, 0, 0.29729729890823364, 0);
BLAZED["49"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Slider.UIStroke
BLAZED["4a"] = Instance.new("UIStroke", BLAZED["40"]);
BLAZED["4a"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["4a"]["Transparency"] = 1;
BLAZED["4a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.Section
BLAZED["4b"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["4b"]["BorderSizePixel"] = 0;
BLAZED["4b"]["BackgroundColor3"] = Color3.fromRGB(19, 19, 19);
BLAZED["4b"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["4b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["4b"]["Visible"] = false;
BLAZED["4b"]["Name"] = [[Section]];

-- Blazed.Reserved.SectionElements.Section.UICorner
BLAZED["4c"] = Instance.new("UICorner", BLAZED["4b"]);
BLAZED["4c"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Section.TextLabel
BLAZED["4d"] = Instance.new("TextLabel", BLAZED["4b"]);
BLAZED["4d"]["BorderSizePixel"] = 0;
BLAZED["4d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["4d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["4d"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["4d"]["TextSize"] = 17;
BLAZED["4d"]["TextColor3"] = Color3.fromRGB(78, 78, 78);
BLAZED["4d"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["4d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["4d"]["Text"] = [[Section]];
BLAZED["4d"]["BackgroundTransparency"] = 1;
BLAZED["4d"]["Position"] = UDim2.new(0.02604166604578495, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Section.UIStroke
BLAZED["4e"] = Instance.new("UIStroke", BLAZED["4b"]);
BLAZED["4e"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["4e"]["Transparency"] = 1;
BLAZED["4e"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.Label
BLAZED["4f"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["4f"]["BorderSizePixel"] = 0;
BLAZED["4f"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["4f"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["4f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["4f"]["Visible"] = false;
BLAZED["4f"]["Name"] = [[Label]];

-- Blazed.Reserved.SectionElements.Label.UICorner
BLAZED["50"] = Instance.new("UICorner", BLAZED["4f"]);
BLAZED["50"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Label.TextLabel
BLAZED["51"] = Instance.new("TextLabel", BLAZED["4f"]);
BLAZED["51"]["BorderSizePixel"] = 0;
BLAZED["51"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["51"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["51"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["51"]["TextSize"] = 17;
BLAZED["51"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["51"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["51"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["51"]["BackgroundTransparency"] = 1;
BLAZED["51"]["Position"] = UDim2.new(0.02604166604578495, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Label.Info
BLAZED["52"] = Instance.new("ImageButton", BLAZED["4f"]);
BLAZED["52"]["BorderSizePixel"] = 0;
BLAZED["52"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["52"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["52"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["52"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["52"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["52"]["Name"] = [[Info]];
BLAZED["52"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["52"]["Visible"] = false;
BLAZED["52"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["52"]["Position"] = UDim2.new(0.9296875, 0, 0.18918919563293457, 0);
BLAZED["52"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Keybind
BLAZED["53"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["53"]["BorderSizePixel"] = 0;
BLAZED["53"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["53"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["53"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["53"]["Visible"] = false;
BLAZED["53"]["Name"] = [[Keybind]];

-- Blazed.Reserved.SectionElements.Keybind.UICorner
BLAZED["54"] = Instance.new("UICorner", BLAZED["53"]);
BLAZED["54"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Keybind.TextLabel
BLAZED["55"] = Instance.new("TextLabel", BLAZED["53"]);
BLAZED["55"]["BorderSizePixel"] = 0;
BLAZED["55"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["55"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["55"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["55"]["TextSize"] = 17;
BLAZED["55"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["55"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["55"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["55"]["Text"] = [[Button]];
BLAZED["55"]["BackgroundTransparency"] = 1;
BLAZED["55"]["Position"] = UDim2.new(0.02604166604578495, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Keybind.TextButton
BLAZED["56"] = Instance.new("TextButton", BLAZED["53"]);
BLAZED["56"]["BorderSizePixel"] = 0;
BLAZED["56"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["56"]["TextSize"] = 14;
BLAZED["56"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["56"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["56"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["56"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["56"]["Text"] = [[]];
BLAZED["56"]["Position"] = UDim2.new(-0.005130290985107422, 0, 0, 0);
BLAZED["56"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Keybind.Info
BLAZED["57"] = Instance.new("ImageButton", BLAZED["53"]);
BLAZED["57"]["BorderSizePixel"] = 0;
BLAZED["57"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["57"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["57"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["57"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["57"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["57"]["Name"] = [[Info]];
BLAZED["57"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["57"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["57"]["Position"] = UDim2.new(0.9322916865348816, 0, 0.1621621549129486, 0);
BLAZED["57"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Keybind.UIStroke
BLAZED["58"] = Instance.new("UIStroke", BLAZED["53"]);
BLAZED["58"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["58"]["Transparency"] = 1;
BLAZED["58"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.Keybind.SelectedKey
BLAZED["59"] = Instance.new("TextLabel", BLAZED["53"]);
BLAZED["59"]["BorderSizePixel"] = 0;
BLAZED["59"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["59"]["TextXAlignment"] = Enum.TextXAlignment.Right;
BLAZED["59"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["59"]["TextSize"] = 17;
BLAZED["59"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["59"]["Size"] = UDim2.new(0, 63, 0, 28);
BLAZED["59"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["59"]["Text"] = [[F]];
BLAZED["59"]["Name"] = [[SelectedKey]];
BLAZED["59"]["BackgroundTransparency"] = 1;
BLAZED["59"]["Position"] = UDim2.new(0.7504940032958984, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Dropdown
BLAZED["5a"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["5a"]["BorderSizePixel"] = 0;
BLAZED["5a"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["5a"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["5a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["5a"]["AutomaticSize"] = Enum.AutomaticSize.Y;
BLAZED["5a"]["Visible"] = false;
BLAZED["5a"]["Name"] = [[Dropdown]];

-- Blazed.Reserved.SectionElements.Dropdown.UICorner
BLAZED["5b"] = Instance.new("UICorner", BLAZED["5a"]);
BLAZED["5b"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Dropdown.TextButton
BLAZED["5c"] = Instance.new("TextButton", BLAZED["5a"]);
BLAZED["5c"]["BorderSizePixel"] = 0;
BLAZED["5c"]["TextStrokeColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["5c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["5c"]["TextSize"] = 14;
BLAZED["5c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
BLAZED["5c"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["5c"]["Size"] = UDim2.new(0, 382, 0, 37);
BLAZED["5c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["5c"]["Text"] = [[]];
BLAZED["5c"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents
BLAZED["5d"] = Instance.new("Frame", BLAZED["5a"]);
BLAZED["5d"]["BorderSizePixel"] = 0;
BLAZED["5d"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["5d"]["Size"] = UDim2.new(0, 384, 0, 0);
BLAZED["5d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["5d"]["Position"] = UDim2.new(0, 0, 0.8379999995231628, 0);
BLAZED["5d"]["Visible"] = false;
BLAZED["5d"]["Name"] = [[DropdownContents]];

-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents.UICorner
BLAZED["5e"] = Instance.new("UICorner", BLAZED["5d"]);
BLAZED["5e"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents.Frame
BLAZED["5f"] = Instance.new("Frame", BLAZED["5d"]);
BLAZED["5f"]["BorderSizePixel"] = 0;
BLAZED["5f"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["5f"]["Size"] = UDim2.new(0, 384, 0, 20);
BLAZED["5f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["5f"]["Position"] = UDim2.new(0, 0, -0.14000000059604645, 0);

-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents.ScrollingFrame
BLAZED["60"] = Instance.new("ScrollingFrame", BLAZED["5d"]);
BLAZED["60"]["Active"] = true;
BLAZED["60"]["BorderSizePixel"] = 0;
BLAZED["60"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
BLAZED["60"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["60"]["Size"] = UDim2.new(0, 381, 0, 29);
BLAZED["60"]["ScrollBarImageColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["60"]["BorderColor3"] = Color3.fromRGB(16, 16, 16);
BLAZED["60"]["ScrollBarThickness"] = 0;
BLAZED["60"]["Position"] = UDim2.new(0.0078125, 0, 0.10810728371143341, 0);

-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents.ScrollingFrame.Button
BLAZED["61"] = Instance.new("TextButton", BLAZED["60"]);
BLAZED["61"]["BorderSizePixel"] = 0;
BLAZED["61"]["AutoButtonColor"] = false;
BLAZED["61"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["61"]["TextSize"] = 14;
BLAZED["61"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["61"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["61"]["Visible"] = false;
BLAZED["61"]["Size"] = UDim2.new(0, 327, 0, 19);
BLAZED["61"]["Name"] = [[Button]];
BLAZED["61"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["61"]["Text"] = [[test]];
BLAZED["61"]["Position"] = UDim2.new(0.07086614519357681, 0, 0.5042263269424438, 0);

-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents.ScrollingFrame.Button.UICorner
BLAZED["62"] = Instance.new("UICorner", BLAZED["61"]);


-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents.ScrollingFrame.Button.UIStroke
BLAZED["63"] = Instance.new("UIStroke", BLAZED["61"]);
BLAZED["63"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["63"]["Transparency"] = 1;
BLAZED["63"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents.ScrollingFrame.UIListLayout
BLAZED["64"] = Instance.new("UIListLayout", BLAZED["60"]);
BLAZED["64"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
BLAZED["64"]["Padding"] = UDim.new(0, 2);
BLAZED["64"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

-- Blazed.Reserved.SectionElements.Dropdown.DropdownContents.ScrollingFrame.UIPadding
BLAZED["65"] = Instance.new("UIPadding", BLAZED["60"]);
BLAZED["65"]["PaddingTop"] = UDim.new(0, 2);
BLAZED["65"]["PaddingBottom"] = UDim.new(0, 2);

-- Blazed.Reserved.SectionElements.Dropdown.TextLabel
BLAZED["66"] = Instance.new("TextLabel", BLAZED["5a"]);
BLAZED["66"]["BorderSizePixel"] = 0;
BLAZED["66"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["66"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["66"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["66"]["TextSize"] = 17;
BLAZED["66"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["66"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["66"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["66"]["Text"] = [[Dropdown]];
BLAZED["66"]["BackgroundTransparency"] = 1;
BLAZED["66"]["Position"] = UDim2.new(0.0234375, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Dropdown.Info
BLAZED["67"] = Instance.new("ImageButton", BLAZED["5a"]);
BLAZED["67"]["BorderSizePixel"] = 0;
BLAZED["67"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["67"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["67"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["67"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["67"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["67"]["Name"] = [[Info]];
BLAZED["67"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["67"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["67"]["Position"] = UDim2.new(0.9322916865348816, 0, 0.1621621549129486, 0);
BLAZED["67"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Dropdown.UIStroke
BLAZED["68"] = Instance.new("UIStroke", BLAZED["5a"]);
BLAZED["68"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["68"]["Transparency"] = 1;
BLAZED["68"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.ColorPicker
BLAZED["69"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["69"]["BorderSizePixel"] = 0;
BLAZED["69"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["69"]["Size"] = UDim2.new(0, 384, 0, 39);
BLAZED["69"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["69"]["Position"] = UDim2.new(0.011102885939180851, 0, 0.02038043551146984, 0);
BLAZED["69"]["AutomaticSize"] = Enum.AutomaticSize.Y;
BLAZED["69"]["Visible"] = false;
BLAZED["69"]["Name"] = [[ColorPicker]];

-- Blazed.Reserved.SectionElements.ColorPicker.UICorner
BLAZED["6a"] = Instance.new("UICorner", BLAZED["69"]);
BLAZED["6a"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.ColorPicker.TextLabel
BLAZED["6b"] = Instance.new("TextLabel", BLAZED["69"]);
BLAZED["6b"]["BorderSizePixel"] = 0;
BLAZED["6b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["6b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["6b"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["6b"]["TextSize"] = 17;
BLAZED["6b"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["6b"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["6b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["6b"]["Text"] = [[Color Picker]];
BLAZED["6b"]["BackgroundTransparency"] = 1;
BLAZED["6b"]["Position"] = UDim2.new(0, 9, 0, 5);

-- Blazed.Reserved.SectionElements.ColorPicker.Info
BLAZED["6c"] = Instance.new("ImageButton", BLAZED["69"]);
BLAZED["6c"]["BorderSizePixel"] = 0;
BLAZED["6c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["6c"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["6c"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["6c"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["6c"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["6c"]["Name"] = [[Info]];
BLAZED["6c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["6c"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["6c"]["Position"] = UDim2.new(0, 355, 0, 9);
BLAZED["6c"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.ColorPicker.Preview
BLAZED["6d"] = Instance.new("TextButton", BLAZED["69"]);
BLAZED["6d"]["BorderSizePixel"] = 0;
BLAZED["6d"]["AutoButtonColor"] = false;
BLAZED["6d"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
BLAZED["6d"]["TextSize"] = 14;
BLAZED["6d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["6d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["6d"]["Size"] = UDim2.new(0, 80, 0, 24);
BLAZED["6d"]["Name"] = [[Preview]];
BLAZED["6d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["6d"]["Text"] = [[]];
BLAZED["6d"]["Position"] = UDim2.new(0, 276, 0, 8);

-- Blazed.Reserved.SectionElements.ColorPicker.Preview.UICorner
BLAZED["6e"] = Instance.new("UICorner", BLAZED["6d"]);
BLAZED["6e"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.ColorPicker.UIStroke
BLAZED["6f"] = Instance.new("UIStroke", BLAZED["69"]);
BLAZED["6f"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["6f"]["Transparency"] = 1;
BLAZED["6f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.Reserved.SectionElements.Button
BLAZED["70"] = Instance.new("Frame", BLAZED["2e"]);
BLAZED["70"]["BorderSizePixel"] = 0;
BLAZED["70"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["70"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["70"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["70"]["Visible"] = false;
BLAZED["70"]["Name"] = [[Button]];

-- Blazed.Reserved.SectionElements.Button.UICorner
BLAZED["71"] = Instance.new("UICorner", BLAZED["70"]);
BLAZED["71"]["CornerRadius"] = UDim.new(0, 10);

-- Blazed.Reserved.SectionElements.Button.TextLabel
BLAZED["72"] = Instance.new("TextLabel", BLAZED["70"]);
BLAZED["72"]["BorderSizePixel"] = 0;
BLAZED["72"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["72"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["72"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["72"]["TextSize"] = 17;
BLAZED["72"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["72"]["Size"] = UDim2.new(0, 90, 0, 28);
BLAZED["72"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["72"]["Text"] = [[Button]];
BLAZED["72"]["BackgroundTransparency"] = 1;
BLAZED["72"]["Position"] = UDim2.new(0.02604166604578495, 0, 0.10810811072587967, 0);

-- Blazed.Reserved.SectionElements.Button.TextButton
BLAZED["73"] = Instance.new("TextButton", BLAZED["70"]);
BLAZED["73"]["BorderSizePixel"] = 0;
BLAZED["73"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["73"]["TextSize"] = 14;
BLAZED["73"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["73"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["73"]["Size"] = UDim2.new(0, 384, 0, 37);
BLAZED["73"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["73"]["Text"] = [[]];
BLAZED["73"]["Position"] = UDim2.new(-0.005130290985107422, 0, 0, 0);
BLAZED["73"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Button.Info
BLAZED["74"] = Instance.new("ImageButton", BLAZED["70"]);
BLAZED["74"]["BorderSizePixel"] = 0;
BLAZED["74"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["74"]["ImageColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["74"]["Image"] = [[rbxassetid://3926305904]];
BLAZED["74"]["ImageRectSize"] = Vector2.new(36, 36);
BLAZED["74"]["Size"] = UDim2.new(0, 23, 0, 23);
BLAZED["74"]["Name"] = [[Info]];
BLAZED["74"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["74"]["ImageRectOffset"] = Vector2.new(764, 764);
BLAZED["74"]["Position"] = UDim2.new(0.9322916865348816, 0, 0.1621621549129486, 0);
BLAZED["74"]["BackgroundTransparency"] = 1;

-- Blazed.Reserved.SectionElements.Button.UIStroke
BLAZED["75"] = Instance.new("UIStroke", BLAZED["70"]);
BLAZED["75"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["75"]["Transparency"] = 1;
BLAZED["75"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

-- Blazed.ColorPicker
BLAZED["76"] = Instance.new("ModuleScript", BLAZED["1"]);
BLAZED["76"]["Name"] = [[ColorPicker]];

-- Blazed.ColorPicker.ColorWindow
BLAZED["77"] = Instance.new("Frame", BLAZED["76"]);
BLAZED["77"]["BorderSizePixel"] = 0;
BLAZED["77"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
BLAZED["77"]["Size"] = UDim2.new(0, 384, 0, 180);
BLAZED["77"]["Position"] = UDim2.new(0, 0, 0, 39);
BLAZED["77"]["Visible"] = false;
BLAZED["77"]["Name"] = [[ColorWindow]];

-- Blazed.ColorPicker.ColorWindow.UICorner
BLAZED["78"] = Instance.new("UICorner", BLAZED["77"]);
BLAZED["78"]["CornerRadius"] = UDim.new(0.05000000074505806, 0);

-- Blazed.ColorPicker.ColorWindow.Content
BLAZED["79"] = Instance.new("ScrollingFrame", BLAZED["77"]);
BLAZED["79"]["Active"] = true;
BLAZED["79"]["ScrollingDirection"] = Enum.ScrollingDirection.Y;
BLAZED["79"]["BorderSizePixel"] = 0;
BLAZED["79"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
BLAZED["79"]["MidImage"] = [[rbxassetid://1510273450]];
BLAZED["79"]["TopImage"] = [[rbxassetid://1510273450]];
BLAZED["79"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["79"]["ScrollingEnabled"] = false;
BLAZED["79"]["AnchorPoint"] = Vector2.new(0, 1);
BLAZED["79"]["BackgroundTransparency"] = 1;
BLAZED["79"]["Size"] = UDim2.new(1, 0, 0.9999999403953552, 0);
BLAZED["79"]["ScrollBarImageColor3"] = Color3.fromRGB(97, 97, 107);
BLAZED["79"]["ScrollBarThickness"] = 0;
BLAZED["79"]["Position"] = UDim2.new(0, 0, 1, 0);
BLAZED["79"]["Name"] = [[Content]];
BLAZED["79"]["BottomImage"] = [[rbxassetid://1510273450]];

-- Blazed.ColorPicker.ColorWindow.Content.Wheel
BLAZED["7a"] = Instance.new("Frame", BLAZED["79"]);
BLAZED["7a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["7a"]["BackgroundTransparency"] = 1;
BLAZED["7a"]["Size"] = UDim2.new(0.8500000238418579, 0, 0.8500000238418579, 0);
BLAZED["7a"]["Name"] = [[Wheel]];

-- Blazed.ColorPicker.ColorWindow.Content.Wheel.UIAspectRatioConstraint
BLAZED["7b"] = Instance.new("UIAspectRatioConstraint", BLAZED["7a"]);


-- Blazed.ColorPicker.ColorWindow.Content.Wheel.Image
BLAZED["7c"] = Instance.new("ImageLabel", BLAZED["7a"]);
BLAZED["7c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["7c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["7c"]["Image"] = [[rbxassetid://2849458409]];
BLAZED["7c"]["Size"] = UDim2.new(1.053196907043457, 0, 0.8636545538902283, 0);
BLAZED["7c"]["Name"] = [[Image]];
BLAZED["7c"]["BackgroundTransparency"] = 1;
BLAZED["7c"]["Position"] = UDim2.new(0.6246408820152283, 0, 0.45810753107070923, 0);

-- Blazed.ColorPicker.ColorWindow.Content.Wheel.Image.Select
BLAZED["7d"] = Instance.new("Frame", BLAZED["7c"]);
BLAZED["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["7d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["7d"]["BackgroundTransparency"] = 1;
BLAZED["7d"]["Size"] = UDim2.new(0.05999999865889549, 0, 0.05999999865889549, 0);
BLAZED["7d"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["7d"]["Name"] = [[Select]];

-- Blazed.ColorPicker.ColorWindow.Content.Wheel.Image.Select.UICorner
BLAZED["7e"] = Instance.new("UICorner", BLAZED["7d"]);
BLAZED["7e"]["CornerRadius"] = UDim.new(0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Content.Wheel.Image.Select.UIStroke
BLAZED["7f"] = Instance.new("UIStroke", BLAZED["7d"]);
BLAZED["7f"]["Thickness"] = 2;

-- Blazed.ColorPicker.ColorWindow.Content.Wheel.Image.UIAspectRatioConstraint
BLAZED["80"] = Instance.new("UIAspectRatioConstraint", BLAZED["7c"]);


-- Blazed.ColorPicker.ColorWindow.Content.Wheel.Button
BLAZED["81"] = Instance.new("TextButton", BLAZED["7a"]);
BLAZED["81"]["ZIndex"] = 99;
BLAZED["81"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["81"]["TextSize"] = 14;
BLAZED["81"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["81"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["81"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["81"]["Name"] = [[Button]];
BLAZED["81"]["Text"] = [[]];
BLAZED["81"]["BackgroundTransparency"] = 1;

-- Blazed.ColorPicker.ColorWindow.Content.Bottom
BLAZED["82"] = Instance.new("Frame", BLAZED["79"]);
BLAZED["82"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["82"]["AnchorPoint"] = Vector2.new(0, 1);
BLAZED["82"]["BackgroundTransparency"] = 1;
BLAZED["82"]["Size"] = UDim2.new(1, 0, 0.15000000596046448, 0);
BLAZED["82"]["Position"] = UDim2.new(0, 0, 1, 0);
BLAZED["82"]["Name"] = [[Bottom]];

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Color
BLAZED["83"] = Instance.new("Frame", BLAZED["82"]);
BLAZED["83"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["83"]["BackgroundTransparency"] = 1;
BLAZED["83"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["83"]["Visible"] = false;
BLAZED["83"]["Name"] = [[Color]];

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Color.UIAspectRatioConstraint
BLAZED["84"] = Instance.new("UIAspectRatioConstraint", BLAZED["83"]);


-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Color.Frame
BLAZED["85"] = Instance.new("Frame", BLAZED["83"]);
BLAZED["85"]["BorderSizePixel"] = 0;
BLAZED["85"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["85"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["85"]["Size"] = UDim2.new(0.800000011920929, 0, 0.800000011920929, 0);
BLAZED["85"]["Position"] = UDim2.new(3.867980480194092, 0, -5.165160655975342, 0);

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Color.Frame.UICorner
BLAZED["86"] = Instance.new("UICorner", BLAZED["85"]);
BLAZED["86"]["CornerRadius"] = UDim.new(0.3499999940395355, 0);

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Buttons
BLAZED["87"] = Instance.new("Frame", BLAZED["82"]);
BLAZED["87"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["87"]["AnchorPoint"] = Vector2.new(0, 0.5);
BLAZED["87"]["BackgroundTransparency"] = 1;
BLAZED["87"]["Size"] = UDim2.new(0.30000001192092896, 0, 0.800000011920929, 0);
BLAZED["87"]["Position"] = UDim2.new(0.20000000298023224, 0, 0.5, 0);
BLAZED["87"]["Name"] = [[Buttons]];

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Buttons.Cancel
BLAZED["88"] = Instance.new("ImageButton", BLAZED["87"]);
BLAZED["88"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["88"]["AnchorPoint"] = Vector2.new(1, 0);
BLAZED["88"]["Image"] = [[rbxassetid://3192543734]];
BLAZED["88"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["88"]["Name"] = [[Cancel]];
BLAZED["88"]["Visible"] = false;
BLAZED["88"]["Position"] = UDim2.new(2.631944417953491, 0, -4.853643894195557, 0);
BLAZED["88"]["BackgroundTransparency"] = 1;

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Buttons.Cancel.UIAspectRatioConstraint
BLAZED["89"] = Instance.new("UIAspectRatioConstraint", BLAZED["88"]);


-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Buttons.Confirm
BLAZED["8a"] = Instance.new("ImageButton", BLAZED["87"]);
BLAZED["8a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["8a"]["Image"] = [[rbxassetid://4510424237]];
BLAZED["8a"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["8a"]["Name"] = [[Confirm]];
BLAZED["8a"]["Visible"] = false;
BLAZED["8a"]["Position"] = UDim2.new(2.378472089767456, 0, -6.533751487731934, 0);
BLAZED["8a"]["BackgroundTransparency"] = 1;

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Buttons.Confirm.UIAspectRatioConstraint
BLAZED["8b"] = Instance.new("UIAspectRatioConstraint", BLAZED["8a"]);


-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Hex
BLAZED["8c"] = Instance.new("Frame", BLAZED["82"]);
BLAZED["8c"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
BLAZED["8c"]["BackgroundTransparency"] = 1;
BLAZED["8c"]["Size"] = UDim2.new(0.530266284942627, 0, 0.7777778506278992, 0);
BLAZED["8c"]["Position"] = UDim2.new(0.0234375, 0, -0.14814816415309906, 0);
BLAZED["8c"]["Name"] = [[Hex]];

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Hex.Frame
BLAZED["8d"] = Instance.new("Frame", BLAZED["8c"]);
BLAZED["8d"]["BorderSizePixel"] = 0;
BLAZED["8d"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
BLAZED["8d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["8d"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["8d"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Hex.Frame.UICorner
BLAZED["8e"] = Instance.new("UICorner", BLAZED["8d"]);
BLAZED["8e"]["CornerRadius"] = UDim.new(0, 6);

-- Blazed.ColorPicker.ColorWindow.Content.Bottom.Hex.Frame.TextBox
BLAZED["8f"] = Instance.new("TextBox", BLAZED["8d"]);
BLAZED["8f"]["TextSize"] = 14;
BLAZED["8f"]["TextWrapped"] = true;
BLAZED["8f"]["TextScaled"] = true;
BLAZED["8f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["8f"]["TextColor3"] = Color3.fromRGB(112, 112, 112);
BLAZED["8f"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["8f"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["8f"]["BackgroundTransparency"] = 1;
BLAZED["8f"]["PlaceholderText"] = [[Hex Code]];
BLAZED["8f"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["8f"]["Text"] = [[#ffffff]];
BLAZED["8f"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["8f"]["ClearTextOnFocus"] = false;

-- Blazed.ColorPicker.ColorWindow.Content.Right
BLAZED["90"] = Instance.new("Frame", BLAZED["79"]);
BLAZED["90"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["90"]["AnchorPoint"] = Vector2.new(1, 0);
BLAZED["90"]["BackgroundTransparency"] = 1;
BLAZED["90"]["Size"] = UDim2.new(0.30000001192092896, 0, 0.8500000238418579, 0);
BLAZED["90"]["Position"] = UDim2.new(1, 0, 0, 0);
BLAZED["90"]["Name"] = [[Right]];

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value
BLAZED["91"] = Instance.new("Frame", BLAZED["90"]);
BLAZED["91"]["BorderSizePixel"] = 0;
BLAZED["91"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["91"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["91"]["Size"] = UDim2.new(0.5212656855583191, 0, 0.8792096972465515, 0);
BLAZED["91"]["Position"] = UDim2.new(-0.5529896020889282, 0, 0.5311079621315002, 0);
BLAZED["91"]["Name"] = [[Value]];

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value.UIAspectRatioConstraint
BLAZED["92"] = Instance.new("UIAspectRatioConstraint", BLAZED["91"]);
BLAZED["92"]["AspectRatio"] = 0.10000000149011612;

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value.UIGradient
BLAZED["93"] = Instance.new("UIGradient", BLAZED["91"]);
BLAZED["93"]["Rotation"] = 90;
BLAZED["93"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value.Select
BLAZED["94"] = Instance.new("Frame", BLAZED["91"]);
BLAZED["94"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["94"]["AnchorPoint"] = Vector2.new(0, 0.5);
BLAZED["94"]["BackgroundTransparency"] = 1;
BLAZED["94"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["94"]["Name"] = [[Select]];

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value.Select.UIAspectRatioConstraint
BLAZED["95"] = Instance.new("UIAspectRatioConstraint", BLAZED["94"]);
BLAZED["95"]["AspectRatio"] = 4;

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value.Select.Select
BLAZED["96"] = Instance.new("Frame", BLAZED["94"]);
BLAZED["96"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["96"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["96"]["BackgroundTransparency"] = 1;
BLAZED["96"]["Size"] = UDim2.new(1.5, 0, 1.5, 0);
BLAZED["96"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["96"]["Name"] = [[Select]];

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value.Select.Select.UICorner
BLAZED["97"] = Instance.new("UICorner", BLAZED["96"]);
BLAZED["97"]["CornerRadius"] = UDim.new(0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value.Select.Select.UIStroke
BLAZED["98"] = Instance.new("UIStroke", BLAZED["96"]);
BLAZED["98"]["Color"] = Color3.fromRGB(255, 255, 255);
BLAZED["98"]["Thickness"] = 2;

-- Blazed.ColorPicker.ColorWindow.Content.Right.Value.Button
BLAZED["99"] = Instance.new("TextButton", BLAZED["91"]);
BLAZED["99"]["ZIndex"] = 99;
BLAZED["99"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["99"]["TextSize"] = 14;
BLAZED["99"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["99"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["99"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["99"]["Name"] = [[Button]];
BLAZED["99"]["Text"] = [[]];
BLAZED["99"]["BackgroundTransparency"] = 1;

-- Blazed.ColorPicker.ColorWindow.Properties
BLAZED["9a"] = Instance.new("Frame", BLAZED["77"]);
BLAZED["9a"]["BorderSizePixel"] = 0;
BLAZED["9a"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 37);
BLAZED["9a"]["BackgroundTransparency"] = 1;
BLAZED["9a"]["Size"] = UDim2.new(0.3531249463558197, 0, 0.9840813279151917, 0);
BLAZED["9a"]["Position"] = UDim2.new(0.6468750834465027, 0, 0.01543477363884449, 0);
BLAZED["9a"]["Name"] = [[Properties]];

-- Blazed.ColorPicker.ColorWindow.Properties.RGB
BLAZED["9b"] = Instance.new("Frame", BLAZED["9a"]);
BLAZED["9b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["9b"]["BackgroundTransparency"] = 0.9990000128746033;
BLAZED["9b"]["Size"] = UDim2.new(0.6296295523643494, 0, 1.0044180154800415, 0);
BLAZED["9b"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
BLAZED["9b"]["Position"] = UDim2.new(0.37037044763565063, 0, 4.307116086010865e-08, 0);
BLAZED["9b"]["Name"] = [[RGB]];

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.B
BLAZED["9c"] = Instance.new("Frame", BLAZED["9b"]);
BLAZED["9c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["9c"]["BackgroundTransparency"] = 1;
BLAZED["9c"]["Size"] = UDim2.new(0.6499127745628357, 0, 0.1863805055618286, 0);
BLAZED["9c"]["Position"] = UDim2.new(0.20332862436771393, 0, 0.6981687545776367, 0);
BLAZED["9c"]["Name"] = [[B]];

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.B.Frame
BLAZED["9d"] = Instance.new("Frame", BLAZED["9c"]);
BLAZED["9d"]["BorderSizePixel"] = 0;
BLAZED["9d"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
BLAZED["9d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["9d"]["Size"] = UDim2.new(0.8580243587493896, 0, 0.7854810953140259, 0);
BLAZED["9d"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.B.Frame.UICorner
BLAZED["9e"] = Instance.new("UICorner", BLAZED["9d"]);
BLAZED["9e"]["CornerRadius"] = UDim.new(0.30000001192092896, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.B.Frame.TextBox
BLAZED["9f"] = Instance.new("TextBox", BLAZED["9d"]);
BLAZED["9f"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179);
BLAZED["9f"]["TextSize"] = 14;
BLAZED["9f"]["TextWrapped"] = true;
BLAZED["9f"]["TextScaled"] = true;
BLAZED["9f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["9f"]["TextColor3"] = Color3.fromRGB(112, 112, 112);
BLAZED["9f"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["9f"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["9f"]["BackgroundTransparency"] = 1;
BLAZED["9f"]["PlaceholderText"] = [[B (0-255)]];
BLAZED["9f"]["Size"] = UDim2.new(1, 0, 0.6000000238418579, 0);
BLAZED["9f"]["Text"] = [[255]];
BLAZED["9f"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["9f"]["ClearTextOnFocus"] = false;

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.B.TextLabel
BLAZED["a0"] = Instance.new("TextLabel", BLAZED["9c"]);
BLAZED["a0"]["TextWrapped"] = true;
BLAZED["a0"]["BorderSizePixel"] = 0;
BLAZED["a0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["a0"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["a0"]["TextSize"] = 14;
BLAZED["a0"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["a0"]["Size"] = UDim2.new(0, 11, 0, 26);
BLAZED["a0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["a0"]["Text"] = [[B]];
BLAZED["a0"]["BackgroundTransparency"] = 1;
BLAZED["a0"]["Position"] = UDim2.new(-0.21554048359394073, 0, 0.10725966095924377, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.G
BLAZED["a1"] = Instance.new("Frame", BLAZED["9b"]);
BLAZED["a1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["a1"]["BackgroundTransparency"] = 1;
BLAZED["a1"]["Size"] = UDim2.new(0.6499127745628357, 0, 0.1863805055618286, 0);
BLAZED["a1"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
BLAZED["a1"]["Position"] = UDim2.new(0.1916159689426422, 0, 0.39465680718421936, 0);
BLAZED["a1"]["Name"] = [[G]];

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.G.Frame
BLAZED["a2"] = Instance.new("Frame", BLAZED["a1"]);
BLAZED["a2"]["BorderSizePixel"] = 0;
BLAZED["a2"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
BLAZED["a2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["a2"]["Size"] = UDim2.new(0.8580243587493896, 0, 0.7854810953140259, 0);
BLAZED["a2"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.G.Frame.UICorner
BLAZED["a3"] = Instance.new("UICorner", BLAZED["a2"]);
BLAZED["a3"]["CornerRadius"] = UDim.new(0.30000001192092896, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.G.Frame.TextBox
BLAZED["a4"] = Instance.new("TextBox", BLAZED["a2"]);
BLAZED["a4"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179);
BLAZED["a4"]["TextSize"] = 14;
BLAZED["a4"]["TextWrapped"] = true;
BLAZED["a4"]["TextScaled"] = true;
BLAZED["a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["a4"]["TextColor3"] = Color3.fromRGB(112, 112, 112);
BLAZED["a4"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["a4"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["a4"]["BackgroundTransparency"] = 1;
BLAZED["a4"]["PlaceholderText"] = [[B (0-255)]];
BLAZED["a4"]["Size"] = UDim2.new(1, 0, 0.6000000238418579, 0);
BLAZED["a4"]["Text"] = [[255]];
BLAZED["a4"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["a4"]["ClearTextOnFocus"] = false;

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.G.TextLabel
BLAZED["a5"] = Instance.new("TextLabel", BLAZED["a1"]);
BLAZED["a5"]["TextWrapped"] = true;
BLAZED["a5"]["BorderSizePixel"] = 0;
BLAZED["a5"]["RichText"] = true;
BLAZED["a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["a5"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["a5"]["TextSize"] = 14;
BLAZED["a5"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["a5"]["Size"] = UDim2.new(0, 11, 0, 26);
BLAZED["a5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["a5"]["Text"] = [[G]];
BLAZED["a5"]["BackgroundTransparency"] = 1;
BLAZED["a5"]["Position"] = UDim2.new(-0.21554048359394073, 0, 0.10725966095924377, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.R
BLAZED["a6"] = Instance.new("Frame", BLAZED["9b"]);
BLAZED["a6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["a6"]["BackgroundTransparency"] = 1;
BLAZED["a6"]["Size"] = UDim2.new(0.6499127745628357, 0, 0.1863805055618286, 0);
BLAZED["a6"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
BLAZED["a6"]["Position"] = UDim2.new(0.1916159689426422, 0, 0.08552426844835281, 0);
BLAZED["a6"]["Name"] = [[R]];

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.R.Frame
BLAZED["a7"] = Instance.new("Frame", BLAZED["a6"]);
BLAZED["a7"]["BorderSizePixel"] = 0;
BLAZED["a7"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
BLAZED["a7"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["a7"]["Size"] = UDim2.new(0.8580243587493896, 0, 0.7854810953140259, 0);
BLAZED["a7"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.R.Frame.UICorner
BLAZED["a8"] = Instance.new("UICorner", BLAZED["a7"]);
BLAZED["a8"]["CornerRadius"] = UDim.new(0.30000001192092896, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.R.Frame.TextBox
BLAZED["a9"] = Instance.new("TextBox", BLAZED["a7"]);
BLAZED["a9"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179);
BLAZED["a9"]["TextSize"] = 14;
BLAZED["a9"]["TextWrapped"] = true;
BLAZED["a9"]["TextScaled"] = true;
BLAZED["a9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["a9"]["TextColor3"] = Color3.fromRGB(112, 112, 112);
BLAZED["a9"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["a9"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["a9"]["BackgroundTransparency"] = 1;
BLAZED["a9"]["PlaceholderText"] = [[B (0-255)]];
BLAZED["a9"]["Size"] = UDim2.new(1, 0, 0.6000000238418579, 0);
BLAZED["a9"]["Text"] = [[255]];
BLAZED["a9"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["a9"]["ClearTextOnFocus"] = false;

-- Blazed.ColorPicker.ColorWindow.Properties.RGB.R.TextLabel
BLAZED["aa"] = Instance.new("TextLabel", BLAZED["a6"]);
BLAZED["aa"]["TextWrapped"] = true;
BLAZED["aa"]["BorderSizePixel"] = 0;
BLAZED["aa"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["aa"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["aa"]["TextSize"] = 14;
BLAZED["aa"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["aa"]["Size"] = UDim2.new(0, 11, 0, 26);
BLAZED["aa"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["aa"]["Text"] = [[R]];
BLAZED["aa"]["BackgroundTransparency"] = 1;
BLAZED["aa"]["Position"] = UDim2.new(-0.21554048359394073, 0, 0.10725966095924377, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.UICorner
BLAZED["ab"] = Instance.new("UICorner", BLAZED["9a"]);
BLAZED["ab"]["CornerRadius"] = UDim.new(0.16500000655651093, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV
BLAZED["ac"] = Instance.new("Frame", BLAZED["9a"]);
BLAZED["ac"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["ac"]["BackgroundTransparency"] = 0.9990000128746033;
BLAZED["ac"]["Size"] = UDim2.new(0.6296295523643494, 0, 1.0044180154800415, 0);
BLAZED["ac"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
BLAZED["ac"]["Position"] = UDim2.new(-0.2196001261472702, 0, 4.307116086010865e-08, 0);
BLAZED["ac"]["Name"] = [[HSV]];

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.V
BLAZED["ad"] = Instance.new("Frame", BLAZED["ac"]);
BLAZED["ad"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["ad"]["BackgroundTransparency"] = 1;
BLAZED["ad"]["Size"] = UDim2.new(0.6499127745628357, 0, 0.1863805055618286, 0);
BLAZED["ad"]["Position"] = UDim2.new(0.20332862436771393, 0, 0.6981687545776367, 0);
BLAZED["ad"]["Name"] = [[V]];

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.V.Frame
BLAZED["ae"] = Instance.new("Frame", BLAZED["ad"]);
BLAZED["ae"]["BorderSizePixel"] = 0;
BLAZED["ae"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
BLAZED["ae"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["ae"]["Size"] = UDim2.new(0.8580243587493896, 0, 0.7854810953140259, 0);
BLAZED["ae"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.V.Frame.UICorner
BLAZED["af"] = Instance.new("UICorner", BLAZED["ae"]);
BLAZED["af"]["CornerRadius"] = UDim.new(0.30000001192092896, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.V.Frame.TextBox
BLAZED["b0"] = Instance.new("TextBox", BLAZED["ae"]);
BLAZED["b0"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179);
BLAZED["b0"]["TextSize"] = 14;
BLAZED["b0"]["TextWrapped"] = true;
BLAZED["b0"]["TextScaled"] = true;
BLAZED["b0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["b0"]["TextColor3"] = Color3.fromRGB(112, 112, 112);
BLAZED["b0"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["b0"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["b0"]["BackgroundTransparency"] = 1;
BLAZED["b0"]["PlaceholderText"] = [[B (0-255)]];
BLAZED["b0"]["Size"] = UDim2.new(1, 0, 0.6000000238418579, 0);
BLAZED["b0"]["Text"] = [[255]];
BLAZED["b0"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["b0"]["ClearTextOnFocus"] = false;

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.V.TextLabel
BLAZED["b1"] = Instance.new("TextLabel", BLAZED["ad"]);
BLAZED["b1"]["TextWrapped"] = true;
BLAZED["b1"]["BorderSizePixel"] = 0;
BLAZED["b1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["b1"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["b1"]["TextSize"] = 14;
BLAZED["b1"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["b1"]["Size"] = UDim2.new(0, 11, 0, 26);
BLAZED["b1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["b1"]["Text"] = [[V]];
BLAZED["b1"]["BackgroundTransparency"] = 1;
BLAZED["b1"]["Position"] = UDim2.new(-0.21554048359394073, 0, 0.10725966095924377, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.S
BLAZED["b2"] = Instance.new("Frame", BLAZED["ac"]);
BLAZED["b2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["b2"]["BackgroundTransparency"] = 1;
BLAZED["b2"]["Size"] = UDim2.new(0.6499127745628357, 0, 0.1863805055618286, 0);
BLAZED["b2"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
BLAZED["b2"]["Position"] = UDim2.new(0.1916159689426422, 0, 0.39465680718421936, 0);
BLAZED["b2"]["Name"] = [[S]];

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.S.Frame
BLAZED["b3"] = Instance.new("Frame", BLAZED["b2"]);
BLAZED["b3"]["BorderSizePixel"] = 0;
BLAZED["b3"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
BLAZED["b3"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["b3"]["Size"] = UDim2.new(0.8580243587493896, 0, 0.7854810953140259, 0);
BLAZED["b3"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.S.Frame.UICorner
BLAZED["b4"] = Instance.new("UICorner", BLAZED["b3"]);
BLAZED["b4"]["CornerRadius"] = UDim.new(0.30000001192092896, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.S.Frame.TextBox
BLAZED["b5"] = Instance.new("TextBox", BLAZED["b3"]);
BLAZED["b5"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179);
BLAZED["b5"]["TextSize"] = 14;
BLAZED["b5"]["TextWrapped"] = true;
BLAZED["b5"]["TextScaled"] = true;
BLAZED["b5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["b5"]["TextColor3"] = Color3.fromRGB(112, 112, 112);
BLAZED["b5"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["b5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["b5"]["BackgroundTransparency"] = 1;
BLAZED["b5"]["PlaceholderText"] = [[B (0-255)]];
BLAZED["b5"]["Size"] = UDim2.new(1, 0, 0.6000000238418579, 0);
BLAZED["b5"]["Text"] = [[255]];
BLAZED["b5"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["b5"]["ClearTextOnFocus"] = false;

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.S.TextLabel
BLAZED["b6"] = Instance.new("TextLabel", BLAZED["b2"]);
BLAZED["b6"]["TextWrapped"] = true;
BLAZED["b6"]["BorderSizePixel"] = 0;
BLAZED["b6"]["RichText"] = true;
BLAZED["b6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["b6"]["TextSize"] = 14;
BLAZED["b6"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["b6"]["Size"] = UDim2.new(0, 11, 0, 26);
BLAZED["b6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["b6"]["Text"] = [[S]];
BLAZED["b6"]["BackgroundTransparency"] = 1;
BLAZED["b6"]["Position"] = UDim2.new(-0.21554048359394073, 0, 0.10725966095924377, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.H
BLAZED["b7"] = Instance.new("Frame", BLAZED["ac"]);
BLAZED["b7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["b7"]["BackgroundTransparency"] = 1;
BLAZED["b7"]["Size"] = UDim2.new(0.6499127745628357, 0, 0.1863805055618286, 0);
BLAZED["b7"]["BorderColor3"] = Color3.fromRGB(28, 43, 54);
BLAZED["b7"]["Position"] = UDim2.new(0.1916159689426422, 0, 0.08552426844835281, 0);
BLAZED["b7"]["Name"] = [[H]];

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.H.Frame
BLAZED["b8"] = Instance.new("Frame", BLAZED["b7"]);
BLAZED["b8"]["BorderSizePixel"] = 0;
BLAZED["b8"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
BLAZED["b8"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["b8"]["Size"] = UDim2.new(0.8580243587493896, 0, 0.7854810953140259, 0);
BLAZED["b8"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.H.Frame.UICorner
BLAZED["b9"] = Instance.new("UICorner", BLAZED["b8"]);
BLAZED["b9"]["CornerRadius"] = UDim.new(0.30000001192092896, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.H.Frame.TextBox
BLAZED["ba"] = Instance.new("TextBox", BLAZED["b8"]);
BLAZED["ba"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179);
BLAZED["ba"]["TextSize"] = 14;
BLAZED["ba"]["TextWrapped"] = true;
BLAZED["ba"]["TextScaled"] = true;
BLAZED["ba"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["ba"]["TextColor3"] = Color3.fromRGB(112, 112, 112);
BLAZED["ba"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["ba"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["ba"]["BackgroundTransparency"] = 1;
BLAZED["ba"]["PlaceholderText"] = [[B (0-255)]];
BLAZED["ba"]["Size"] = UDim2.new(1, 0, 0.6000000238418579, 0);
BLAZED["ba"]["Text"] = [[255]];
BLAZED["ba"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["ba"]["ClearTextOnFocus"] = false;

-- Blazed.ColorPicker.ColorWindow.Properties.HSV.H.TextLabel
BLAZED["bb"] = Instance.new("TextLabel", BLAZED["b7"]);
BLAZED["bb"]["TextWrapped"] = true;
BLAZED["bb"]["BorderSizePixel"] = 0;
BLAZED["bb"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["bb"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["bb"]["TextSize"] = 14;
BLAZED["bb"]["TextColor3"] = Color3.fromRGB(67, 67, 67);
BLAZED["bb"]["Size"] = UDim2.new(0, 11, 0, 26);
BLAZED["bb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["bb"]["Text"] = [[H]];
BLAZED["bb"]["BackgroundTransparency"] = 1;
BLAZED["bb"]["Position"] = UDim2.new(-0.21554048359394073, 0, 0.10725966095924377, 0);

-- Blazed.ColorPicker.ColorWindow.Properties.Line
BLAZED["bc"] = Instance.new("Frame", BLAZED["9a"]);
BLAZED["bc"]["BorderSizePixel"] = 0;
BLAZED["bc"]["BackgroundColor3"] = Color3.fromRGB(37, 37, 47);
BLAZED["bc"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
BLAZED["bc"]["BackgroundTransparency"] = 1;
BLAZED["bc"]["Size"] = UDim2.new(0.949999988079071, 0, 0, 2);
BLAZED["bc"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
BLAZED["bc"]["Visible"] = false;
BLAZED["bc"]["Name"] = [[Line]];

-- Blazed.ColorPicker.ColorWindow.FinishedEvent
BLAZED["bd"] = Instance.new("BindableEvent", BLAZED["77"]);
BLAZED["bd"]["Name"] = [[FinishedEvent]];

-- Blazed.ColorPicker.ColorWindow.CanceledEvent
BLAZED["be"] = Instance.new("BindableEvent", BLAZED["77"]);
BLAZED["be"]["Name"] = [[CanceledEvent]];

-- Blazed.ColorPicker.ColorWindow.UpdateEvent
BLAZED["bf"] = Instance.new("BindableEvent", BLAZED["77"]);
BLAZED["bf"]["Name"] = [[UpdateEvent]];

-- Blazed.ColorPicker.ColorWindow.Topbar
BLAZED["c0"] = Instance.new("Frame", BLAZED["77"]);
BLAZED["c0"]["BorderSizePixel"] = 0;
BLAZED["c0"]["BackgroundColor3"] = Color3.fromRGB(22, 22, 32);
BLAZED["c0"]["Size"] = UDim2.new(1, 0, 0.10000000149011612, 0);
BLAZED["c0"]["Visible"] = false;
BLAZED["c0"]["Name"] = [[Topbar]];

-- Blazed.ColorPicker.ColorWindow.Topbar.Frame
BLAZED["c1"] = Instance.new("Frame", BLAZED["c0"]);
BLAZED["c1"]["ZIndex"] = 0;
BLAZED["c1"]["BorderSizePixel"] = 0;
BLAZED["c1"]["BackgroundColor3"] = Color3.fromRGB(22, 22, 32);
BLAZED["c1"]["AnchorPoint"] = Vector2.new(0, 1);
BLAZED["c1"]["Size"] = UDim2.new(1, 0, 0.5, 0);
BLAZED["c1"]["Position"] = UDim2.new(0, 0, 1, 0);

-- Blazed.ColorPicker.ColorWindow.Topbar.Text
BLAZED["c2"] = Instance.new("TextLabel", BLAZED["c0"]);
BLAZED["c2"]["TextWrapped"] = true;
BLAZED["c2"]["TextScaled"] = true;
BLAZED["c2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["c2"]["TextXAlignment"] = Enum.TextXAlignment.Left;
BLAZED["c2"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
BLAZED["c2"]["TextSize"] = 14;
BLAZED["c2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["c2"]["AnchorPoint"] = Vector2.new(0, 0.5);
BLAZED["c2"]["Size"] = UDim2.new(0.800000011920929, 0, 0.699999988079071, 0);
BLAZED["c2"]["Text"] = [[Color]];
BLAZED["c2"]["Name"] = [[Text]];
BLAZED["c2"]["BackgroundTransparency"] = 1;
BLAZED["c2"]["Position"] = UDim2.new(0.019999999552965164, 0, 0.5, 0);

-- Blazed.ColorPicker.ColorWindow.Topbar.Button
BLAZED["c3"] = Instance.new("TextButton", BLAZED["c0"]);
BLAZED["c3"]["TextWrapped"] = true;
BLAZED["c3"]["TextScaled"] = true;
BLAZED["c3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
BLAZED["c3"]["TextSize"] = 14;
BLAZED["c3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
BLAZED["c3"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
BLAZED["c3"]["Size"] = UDim2.new(1, 0, 1, 0);
BLAZED["c3"]["Name"] = [[Button]];
BLAZED["c3"]["Text"] = [[]];
BLAZED["c3"]["BackgroundTransparency"] = 1;

-- Blazed.ColorPicker.ColorWindow.Topbar.UICorner
BLAZED["c4"] = Instance.new("UICorner", BLAZED["c0"]);
BLAZED["c4"]["CornerRadius"] = UDim.new(0.3799999952316284, 0);

-- Blazed.LocalScript
BLAZED["c5"] = Instance.new("LocalScript", BLAZED["1"]);


-- Require BLAZED wrapper
local BLAZED_REQUIRE = require;
local BLAZED_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = BLAZED_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return BLAZED_REQUIRE(Module);
end

BLAZED_MODULES[BLAZED["27"]] = {
Closure = function()
    local script = BLAZED["27"];
local LIBRARY = {}
LIBRARY.__index = LIBRARY
-- Variables




local taskwait = task.wait
local LocalPlayer = game:GetService("Players").LocalPlayer
-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

-- Stuffz :3
local realLib = script.Parent
realLib.Parent = nil
realLib.Enabled = false

-- functions
script.Parent = nil



local function EnableDrag(Frame)
	local dragToggle
	local dragSpeed = .25
	local dragInput
	local dragStart
	local dragPos

	local function updateInput(input)
		local Delta = input.Position - dragStart
		local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
		game:GetService("TweenService"):Create(Frame, TweenInfo.new(.1), {Position = Position}):Play()
	end

	Frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
			dragToggle = true
			dragStart = input.Position
			startPos = Frame.Position
			input.Changed:Connect(function()
				if (input.UserInputState == Enum.UserInputState.End) then
					dragToggle = false
				end
			end)
		end
	end)

	Frame.InputChanged:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			dragInput = input
		end
	end)

	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if (input == dragInput and dragToggle) then
			updateInput(input)
		end
	end)
end








function LIBRARY.CreateLib(title,theme)
	local LIB = setmetatable({}, LIBRARY)
	
	local newLib = realLib:Clone()
	
	newLib.BlazedFrame.SideTabs.Title.Text = title
	newLib.Enabled = true
	
	newLib.Name = title
	
	newLib.Parent =--[[gethui() or game:GetService("CoreGui") or]] game:GetService("Players").LocalPlayer.PlayerGui
	
	
	local Blazed = newLib
	local BlazedFrame = Blazed.BlazedFrame
	local reserved = Blazed.Reserved
	local reservedSectionElements = reserved.SectionElements
	local Tabs = BlazedFrame.Tabs
	local ButtonTabs  =BlazedFrame.SideTabs.ScrollingFrame
	local BlazedLanding = BlazedFrame.Landing
	
	EnableDrag(BlazedFrame)
	
	BlazedLanding.Profile.Image = Players:GetUserThumbnailAsync(LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
	BlazedLanding.Username.Text = LocalPlayer.Name
	BlazedLanding.DisplayName.Text = LocalPlayer.DisplayName
	
	function LIB:SetLanding(version, inviteServer, changelogs)
		BlazedLanding.Version.TextLabel.Text = version
		BlazedLanding.Server.TextLabel.Text = inviteServer
		
		local TextBackup = BlazedLanding.Changelogs.ScrollingFrame.TextLabel:Clone()
		BlazedLanding.Changelogs.ScrollingFrame.TextLabel:Destroy()
		
		for i, changes in pairs(changelogs) do
			local newText = TextBackup:Clone()
			
			newText.Parent = BlazedLanding.Changelogs.ScrollingFrame
			newText.Text  = changes
			newText.Name = changes
		end
	end
	
	
	
	-- manual autocanvas size cuz roblos stupid as heck
	local function Refresh()
		local size = 0
		for i,v in pairs(BlazedLanding.Changelogs.ScrollingFrame:GetChildren()) do
			if v:IsA("TextLabel") then
				size = size + v.AbsoluteSize.Y + 6
			end
		end
		BlazedLanding.Changelogs.ScrollingFrame.CanvasSize = UDim2.fromOffset(0, size)
	end

	for i,v in pairs(BlazedLanding.Changelogs.ScrollingFrame:GetChildren()) do
		if v:IsA("Frame") then
			v:GetPropertyChangedSignal("Size"):Connect(Refresh)
		end
	end
	BlazedLanding.Changelogs.ScrollingFrame.MouseMoved:Connect(Refresh)
	BlazedLanding.Changelogs.ScrollingFrame:GetPropertyChangedSignal("CanvasPosition"):Connect(Refresh)
	BlazedLanding.Changelogs.ScrollingFrame.MouseLeave:Connect(Refresh)
	BlazedLanding.Changelogs.ScrollingFrame.MouseEnter:Connect(Refresh)
	
	local function Popup(text)
		local FramePart = BlazedFrame.Tabs.InfoViewer
		local InfoText = FramePart.TextLabel

		InfoText.Text = text

		local show = TweenService:Create(FramePart, TweenInfo.new(0.35), { Position = UDim2.new(0.016, 0,0.837, 0) })
		show:Play()
		show.Completed:Wait()
		wait(2.5)
		local show = TweenService:Create(FramePart, TweenInfo.new(0.35), { Position = UDim2.new(0.016, 0,1, 0) })
		show:Play()
	end	
	
	
	

	function LIB:NewTab(name)
		local TAB = setmetatable({}, LIB)
		
		local newTabButton = reserved.TabButton:Clone()
		local newTab = reserved.Tab:Clone()
		
		newTab.Parent = Tabs
		newTabButton.Parent = ButtonTabs
		
		newTab.Name = name
		newTabButton.Name = name
		newTabButton.Visible = true
		newTabButton.Text = name
		
		--newTabButton.MouseEnter:Connect(function()
		--	TweenService:Create(newTabButton.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
		--end)

		--newTabButton.MouseLeave:Connect(function()
		--	TweenService:Create(newTabButton.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
		--end)
		

		
		newTabButton.MouseButton1Click:Connect(function()
			BlazedLanding.Visible = false
			for i,v in pairs(Tabs:GetChildren()) do
				if v:IsA("ScrollingFrame") then
					if v.Name ~= name then
						v.Visible  =false
					elseif v.Name == name then
						v.Visible = true
					end
				end
			end
			
			
			for i,v in pairs(ButtonTabs:GetChildren()) do
				if v:IsA("TextButton") then
					if v.Name == name then
						local Highlight = TweenService:Create(v, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(16,16,16) })
						Highlight:Play()
					elseif v.Name ~= name then
						local UnHighlight = TweenService:Create(v, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(13,13,13) })
						UnHighlight:Play()
					end
				end
			end
		end)
		
		local TransparencyData = {}
		local cooldown = false

		function LIB:ToggleUI()
			if not cooldown then
				cooldown = true
				if newLib.Enabled == true then
					for i, v in pairs(newLib:GetDescendants()) do
						if v:IsA("ScrollingFrame") or v:IsA("Frame") or v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("ImageLabel") or v:IsA("ImageButton") then
							TransparencyData[v:GetFullName()] = {
								BackgroundTransparency = v.BackgroundTransparency,
								TextTransparency = (v:IsA("TextLabel") or v:IsA("TextButton")) and v.TextTransparency or nil,
								ImageTransparency = (v:IsA("ImageLabel") or v:IsA("ImageButton")) and v.ImageTransparency or nil
							}

							local fade = TweenService:Create(v, TweenInfo.new(0.2), {
								BackgroundTransparency = 1,
								TextTransparency = (v:IsA("TextLabel") or v:IsA("TextButton")) and 1 or (v:IsA("TextButton") and TransparencyData[v:GetFullName()].TextTransparency or nil),
								ImageTransparency = (v:IsA("ImageLabel") or v:IsA("ImageButton")) and 1 or nil
							})
							fade:Play()
						end
					end

					wait(0.2)  -- Wait for the fade animation to complete
					newLib.Enabled = false
				else
					newLib.Enabled = true
					for i, v in pairs(newLib:GetDescendants()) do
						if v:IsA("ScrollingFrame") or v:IsA("Frame") or v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("ImageLabel") or v:IsA("ImageButton") then
							local fade = TweenService:Create(v, TweenInfo.new(0.2), {
								BackgroundTransparency = TransparencyData[v:GetFullName()].BackgroundTransparency,
								TextTransparency = (v:IsA("TextLabel") or v:IsA("TextButton")) and 0 or (v:IsA("TextButton") and TransparencyData[v:GetFullName()].TextTransparency or nil),
								ImageTransparency = (v:IsA("ImageLabel") or v:IsA("ImageButton")) and TransparencyData[v:GetFullName()].ImageTransparency or nil
							})
							fade:Play()
						end
					end
					wait(0.2)
				end
				cooldown = false
			end
		end




		
		
		-- Section
		function TAB:NewSection(name)
			local SECTION = setmetatable({}, TAB)
			
			local newSection = reservedSectionElements.Section:Clone()
			
			newSection.Parent = newTab
			newSection.Name = name
			
			newSection.TextLabel.Text = name
			newSection.Visible = true
			
			function SECTION:UpdateSection(newtitle)
				newSection.TextLabel.Text = newtitle
			end
			
			-- Functions
			function SECTION:NewLabel(text)
				local LABEL = setmetatable({}, SECTION)
				local newLabel = reservedSectionElements.Label:Clone()
				
				newLabel.Parent = newTab
				newLabel.Name = text
				newLabel.TextLabel.Text = text
				
				newLabel.Visible =true
				
				function LABEL:UpdateLabel(newtext)
					newLabel.TextLabel.Text = text
				end
				
				return LABEL
			end
			
			function SECTION:NewButton(name, info, func)
				local BUTTON = setmetatable({}, SECTION)
				local newButton = reservedSectionElements.Button:Clone()
				
				newButton.Name = name
				newButton.Parent = newTab
				newButton.TextLabel.Text = name
				
				newButton.Visible = true
				
				newButton.TextButton.MouseButton1Click:Connect(function()
					func()
				end)
				
				--newButton.MouseEnter:Connect(function()
				--	TweenService:Create(newButton.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
				--end)
				
				--newButton.MouseLeave:Connect(function()
				--	TweenService:Create(newButton.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
				--end)
				
				--newButton.TextButton.MouseButton1Down:Connect(function()
				--	TweenService:Create(newButton, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(21,21,21) }):Play()
				--end)

				--newButton.TextButton.MouseButton1Up:Connect(function()
				--	TweenService:Create(newButton, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
				--end)
				
				newButton.Info.MouseButton1Click:Connect(function()
					Popup(info)
				end)
				
				function BUTTON:UpdateButton(newText)
					newButton.TextLabel.Text = newText
				end
				return BUTTON
			end
			
			function SECTION:NewTextBox(name, info, func)
				local TEXTBOX = setmetatable({}, SECTION)
				local newTextbox = reservedSectionElements.Textbox:Clone()
				
				newTextbox.Name = name
				newTextbox.Parent = newTab
				newTextbox.TextLabel.Text = name
				
				newTextbox.Visible = true
				
				--newTextbox.MouseEnter:Connect(function()
				--	TweenService:Create(newTextbox.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
				--end)

				--newTextbox.MouseLeave:Connect(function()
				--	TweenService:Create(newTextbox.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
				--end)
				
				newTextbox.TextBox.Focused:Connect(function()
					TweenService:Create(newTextbox, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(21,21,21) }):Play()
					TweenService:Create(newTextbox.TextBox.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
				end)
				
				
				newTextbox.Info.MouseButton1Click:Connect(function()
					Popup(info)
				end)
				
				newTextbox.TextBox.FocusLost:Connect(function()
					func(newTextbox.TextBox.Text)
					TweenService:Create(newTextbox, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
					TweenService:Create(newTextbox.TextBox.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
				end)
				
				function TEXTBOX:UpdateTextbox(newText)
					newTextbox.TextLabel.Text = newText
				end
				
				return TEXTBOX
			end
			function SECTION:NewToggle(name, info, func)
				local TOGGLE = setmetatable({}, SECTION)
				local newToggle = reservedSectionElements.Toggle:Clone()
				
				newToggle.Name = name
				newToggle.Parent = newTab
				newToggle.TextLabel.Text = name
				
				newToggle.Visible = true
				
				local state =false
				
				--newToggle.MouseEnter:Connect(function()
				--	TweenService:Create(newToggle.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
				--end)

				--newToggle.MouseLeave:Connect(function()
				--	TweenService:Create(newToggle.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
				--end)
				
				--newToggle.TextButton.MouseButton1Down:Connect(function()
				--	TweenService:Create(newToggle, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(21,21,21) }):Play()
				--end)

				--newToggle.TextButton.MouseButton1Up:Connect(function()
				--	TweenService:Create(newToggle, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
				--end)
				
				newToggle.Info.MouseButton1Click:Connect(function()
					Popup(info)
				end)
				
				newToggle.TextButton.MouseButton1Click:Connect(function()
					if state == false then
						state = not state
						func(state)
						TweenService:Create(newToggle.Frame, TweenInfo.new(0.5), {BackgroundColor3 = Color3.fromRGB(0,255,0)}):Play()
					elseif state == true then
						state = not state
						func(state)
						TweenService:Create(newToggle.Frame, TweenInfo.new(0.5), {BackgroundColor3 = Color3.fromRGB(255,0,0)}):Play()
					end
				end)
				
				function TOGGLE:UpdateToggle(newtext)
					newToggle.TextLabel.Text = newtext
				end
				return TOGGLE
			end
			
			function SECTION:NewSlider(name, info, max, min, func, inc)
				local newSlider  =reservedSectionElements.Slider:Clone()
				
				newSlider.Visible = true
				newSlider.Name = name
				newSlider.Parent = newTab
				newSlider.TextLabel.Text = name

				newSlider.Value.Text = min
				
				
				--newSlider.MouseEnter:Connect(function()
				--	TweenService:Create(newSlider.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
				--end)

				--newSlider.MouseLeave:Connect(function()
				--	TweenService:Create(newSlider.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
				--end)
				
				--newSlider.Trigger.MouseButton1Down:Connect(function()
				--	TweenService:Create(newSlider, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(21,21,21) }):Play()
				--end)

				--newSlider.Trigger.MouseButton1Up:Connect(function()
				--	TweenService:Create(newSlider, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
				--end)
				
				local Mouse = game.Players.LocalPlayer:GetMouse()
				local tweenServ = TweenService

				local Trigger = newSlider.Trigger
				local Label = newSlider.Value
				local Fill = newSlider.Frame.Frame
				local Parent = newSlider.Frame

				local perc
				local Percent
				local MouseDown = false
				local delayTw = 0.25

				local function Update()
					MouseDown = true
					if inc then
						repeat
							task.wait()
							Percent = math.clamp((Mouse.X - Parent.AbsolutePosition.X) / Parent.AbsoluteSize.X, 0, 1)
							perc = min + (Percent * (max - min))

							-- Calculate the rounded value with the specified precision
							local roundedValue = math.round(perc / inc) * inc

							-- Clamp the value to the specified range
							perc = math.clamp(roundedValue, min, max)

							local function fixInt(number, decimalPlaces)
								local multiplier = 10 ^ decimalPlaces
								return math.floor(number * multiplier + 0.5) / multiplier
							end




							local amount = tostring(inc)
							amount:gsub("%d+.","")
							amount = #amount
							perc = fixInt(perc,tonumber(amount))

							Label.Text = perc


							local tween = tweenServ:Create(Fill, TweenInfo.new(delayTw, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.fromScale(Percent, 1) })
							tween:Play()
							func(perc)
						until MouseDown == false
					else
						repeat
							task.wait()
							Percent = math.clamp((Mouse.X - Parent.AbsolutePosition.X) / Parent.AbsoluteSize.X,0,1)
							perc = math.round(Percent * max)

							Label.Text = perc
							

							local tween = tweenServ:Create(Fill, TweenInfo.new(delayTw, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.fromScale(Percent, Fill.Size.Y.Scale) })
							tween:Play()
							func(perc)

						until MouseDown == false
					end
					
				end

				Trigger.MouseButton1Down:Connect(Update)

				UserInputService.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						MouseDown = false
					end
				end)
				
				newSlider.Info.MouseButton1Click:Connect(function()
					Popup(info)
				end)
			end
			
			function SECTION:NewDropdown(name, info, Table, func)
				local DROPDOWN = setmetatable({}, SECTION)
				local newDropdown = reservedSectionElements.Dropdown:Clone()
				local Dropdownbutton = newDropdown.DropdownContents.ScrollingFrame.Button:Clone()
				
				local DropdownContents = newDropdown.DropdownContents.ScrollingFrame
				local size = 0
				
				
				

				newDropdown.Name = name
				
				newDropdown.TextLabel.Text = name.." [none]"
				newDropdown.Parent = newTab
				newDropdown.Visible = true
				
				local ddname = name
				
				newDropdown.DropdownContents.ScrollingFrame.Button:Destroy()

				--newDropdown.MouseEnter:Connect(function()
				--	TweenService:Create(newDropdown.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
				--end)

				--newDropdown.MouseLeave:Connect(function()
				--	TweenService:Create(newDropdown.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
				--end)
				
				newDropdown.Info.MouseButton1Click:Connect(function()
					Popup(info)
				end)
				newDropdown.TextButton.MouseButton1Click:Connect(function()
					if newDropdown.DropdownContents.Visible == true then
						TweenService:Create(newDropdown, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
								local close = TweenService:Create(newDropdown.DropdownContents, TweenInfo.new(0.15), { Size = UDim2.fromOffset(384, 0)})
								close:Play()
								close.Completed:Wait()
								newDropdown.DropdownContents.Visible = not newDropdown.DropdownContents.Visible
							else
								newDropdown.DropdownContents.Visible = not newDropdown.DropdownContents.Visible
								TweenService:Create(newDropdown.DropdownContents, TweenInfo.new(0.15), { Size = UDim2.fromOffset(384, 37)}):Play()
								TweenService:Create(newDropdown, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(21,21,21) }):Play()
							end

						end)

						local function UpdateDropdown()
							size = 0
							for _,item in pairs(DropdownContents:GetChildren()) do
								if not string.find(item.Name, "UI") then
									size = size + item.AbsoluteSize.Y + 2
								end
							end
							DropdownContents.CanvasSize = UDim2.fromOffset(0,size + 4)
						end

						for _,name in pairs(Table) do
							local newDropdownButton = Dropdownbutton:Clone()

							newDropdownButton.Parent = newDropdown.DropdownContents.ScrollingFrame
							newDropdownButton.Visible = true
							newDropdownButton.Text = name

							--newDropdownButton.MouseEnter:Connect(function()
							--	TweenService:Create(newDropdownButton.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
							--end)

							--newDropdownButton.MouseLeave:Connect(function()
							--	TweenService:Create(newDropdownButton.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
							--end)

							--newDropdownButton.MouseButton1Down:Connect(function()
							--	TweenService:Create(newDropdownButton, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(21,21,21) }):Play()
							--end)

							--newDropdownButton.MouseButton1Up:Connect(function()
							--	TweenService:Create(newDropdownButton, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
							--end)


							newDropdownButton.MouseButton1Click:Connect(function()
								func(name)
								newDropdown.TextLabel.Text = ddname.." ["..name.."]"
								TweenService:Create(newDropdown, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
								local close = TweenService:Create(newDropdown.DropdownContents, TweenInfo.new(0.15), { Size = UDim2.fromOffset(384, 0)})
								close:Play()
								close.Completed:Wait()

								newDropdown.DropdownContents.Visible = false


							end)
						end

						DropdownContents.Changed:Connect(UpdateDropdown)

						function DROPDOWN:Refresh(newTable)
							for i,v in pairs(DropdownContents:GetChildren()) do
								if v:IsA("TextButton") then
									v:Destroy()
								end
							end

							for i,name in pairs(newTable) do
								local newDropdownButton = Dropdownbutton:Clone()

								newDropdownButton.Parent = newDropdown.DropdownContents.ScrollingFrame
								newDropdownButton.Visible = true
								newDropdownButton.Text = name

								--newDropdownButton.MouseEnter:Connect(function()
								--	TweenService:Create(newDropdownButton.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
								--end)

								--newDropdownButton.MouseLeave:Connect(function()
								--	TweenService:Create(newDropdownButton.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
								--end)

								newDropdown.Changed:Connect(UpdateDropdown)

								newDropdownButton.MouseButton1Click:Connect(function()
									func(name)
									newDropdown.TextLabel.Text = ddname.." ["..name.."]"

									TweenService:Create(newDropdown, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
									local close = TweenService:Create(newDropdown.DropdownContents, TweenInfo.new(0.15), { Size = UDim2.fromOffset(384, 0)})
									close:Play()
									close.Completed:Wait()

									newDropdown.DropdownContents.Visible = false

									UpdateDropdown()
								end)
							end
						end

						return DROPDOWN
					end

					function SECTION:NewColorPicker(name, info, defaultColor, func, usingRGB)
						local newColor = reservedSectionElements.ColorPicker:Clone()
						local ColorLib = require(script.Parent.ColorPicker)


						newColor.Name =name
						newColor.TextLabel.Text = name

						newColor.Visible = true
						newColor.Parent = newTab

						local Picker = ColorLib.New(newColor, game:GetService("Players").LocalPlayer:GetMouse())
						Picker:SetColor(defaultColor)
						newColor.Preview.BackgroundColor3 = defaultColor

						Picker.Updated:Connect(function(color)
							func(color)
							newColor.Preview.BackgroundColor3 = color
						end)

						--newColor.MouseEnter:Connect(function()
						--	TweenService:Create(newColor.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
						--end)

						--newColor.MouseLeave:Connect(function()
						--	TweenService:Create(newColor.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
						--end)

						--newColor.Preview.MouseButton1Down:Connect(function()
						--	TweenService:Create(newColor, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(21,21,21) }):Play()
						--end)

						--newColor.Preview.MouseButton1Up:Connect(function()
						--	TweenService:Create(newColor, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
						--end)


						newColor.Preview.MouseButton1Click:Connect(function()
							if newColor.ColorWindow.Visible == true then
								--close
								local close = TweenService:Create(newColor:FindFirstChild("ColorWindow"), TweenInfo.new(0.15), { Size = UDim2.fromOffset(384, 0) })
								close:Play()
								close.Completed:Wait()
								newColor.ColorWindow.Visible = false
							elseif newColor.ColorWindow.Visible == false then
								newColor.ColorWindow.Visible = true
								TweenService:Create(newColor:FindFirstChild("ColorWindow"), TweenInfo.new(0.15), { Size = UDim2.fromOffset(384, 180) }):Play()

							end
						end)
					end

					function SECTION:NewKeybind(name, info, key, func)
						local newKeybind = reservedSectionElements.Keybind:Clone()
						local listening
						local key = key

						newKeybind.Name = name
						newKeybind.Parent = newTab
						newKeybind.Visible = true
						newKeybind.TextLabel.Text = name

						--newKeybind.MouseEnter:Connect(function()
						--	TweenService:Create(newKeybind.UIStroke, TweenInfo.new(0.15), { Transparency = 0 }):Play()
						--end)

						--newKeybind.MouseLeave:Connect(function()
						--	TweenService:Create(newKeybind.UIStroke, TweenInfo.new(0.15), { Transparency = 1 }):Play()
						--end)

						--newKeybind.TextButton.MouseButton1Down:Connect(function()
						--	TweenService:Create(newKeybind, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(21,21,21) }):Play()
						--end)

						--newKeybind.TextButton.MouseButton1Up:Connect(function()
						--	TweenService:Create(newKeybind, TweenInfo.new(0.15), { BackgroundColor3 = Color3.fromRGB(12,12,12) }):Play()
						--end)

						newKeybind.TextButton.MouseButton1Click:Connect(function()
							newKeybind.SelectedKey.Text = "..."
							listening = UserInputService.InputBegan:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.Keyboard then
									newKeybind.SelectedKey.Text = input.KeyCode.Name
									key = input.KeyCode
									listening:Disconnect()
								end
							end)

						end)

						UserInputService.InputBegan:Connect(function(input)
							if input.KeyCode == key then
								func()
							end
						end)

					end

					-- manual autocanvas size cuz roblos stupid as heck
					local function Refresh()
						local size = 0
						for i,v in pairs(newTab:GetChildren()) do
							if v:IsA("Frame") then
								size = size + v.AbsoluteSize.Y + 6
							end
						end
						newTab.CanvasSize = UDim2.fromOffset(0, size)
					end

					for i,v in pairs(newTab:GetChildren()) do
						if v:IsA("Frame") then
							v:GetPropertyChangedSignal("Size"):Connect(Refresh)
						end
					end
					newTab.MouseMoved:Connect(Refresh)
					newTab:GetPropertyChangedSignal("CanvasPosition"):Connect(Refresh)
					newTab.MouseLeave:Connect(Refresh)
					newTab.MouseEnter:Connect(Refresh)

					------------------------------------------------
					return SECTION
				end

				return TAB
			end

			return LIB
		end

		return LIBRARY

	end;
};
BLAZED_MODULES[BLAZED["76"]] = {
	Closure = function()
		local script = BLAZED["76"];
--[[

Circular Color Picker - by Trinkance

You are free to use this resource in any games or plugins

"Yo my bad if im using module from some1, im suck at scripting :v" - chillz

-------------------------------------------------------------------------

For more info:

https://devforum.roblox.com/t/1846195

--]]

		--variables
		local runService = game:GetService("RunService")
		local uis = game:GetService("UserInputService")


		--module
		local Color = {}
		Color.__index = Color

		--functions
		function toPolar(v)
			return math.atan2(v.y,v.x),v.Magnitude
		end

		function radToDeg(x)
			return ((x + math.pi) / (2 * math.pi)) * 360;
		end

		function template(tab,template)
			tab = (tab and (typeof(tab) == "table")) and tab or {}
			for i,v in pairs(template) do
				if tab[i] == nil then
					tab[i] = v
				end
			end

			return tab
		end

		--rotate vector by degrees
		function rotateVector(v,deg)
			local theta = math.rad(deg)
			local oldX,oldY = v.X,v.Y

			return Vector2.new(
				(oldX * math.cos(theta)) - (oldY * math.sin(theta)),
				(oldX * math.sin(theta)) + (oldY * math.cos(theta))
			)
		end

		--round number to nearest hundredths place
		function roundToHundredths(num)
			return math.ceil(num * 100) / 100
		end

		--methods
		function Color.New(gui : ScreenGui,mouse : PlayerMouse,params : any)
			params = template(params,{
				Position = UDim2.fromOffset(0, 39),
				RoundedCorners = true,

				PrimaryColor = Color3.fromRGB(12,12,12),
				SecondaryColor = Color3.fromRGB(29,29,29),
				TopbarColor = Color3.fromRGB(12,12,12),
				TextColor = Color3.fromRGB(66,66,66)
			})

			local self = setmetatable({
				Gui = gui,
				Mouse = mouse,
				Color = Color3.fromRGB(255,255,255),
				Params = params
			},Color)

			--create
			self:Create()

			--wheel
			self._wheelDownFunc = nil
			self._wheelUpFunc_uis = nil

			local function _resetWheelFunc()
				if self._wheelDownFunc then
					self._wheelDownFunc:Disconnect()
					self._wheelDownFunc = nil
				end

				if self._wheelUpFunc_uis then
					self._wheelUpFunc_uis:Disconnect()
					self._wheelUpFunc_uis = nil
				end
			end

			self.Instance.Wheel.Button.MouseButton1Down:Connect(function()
				self.Instance.Parent.Topbar.Button.Visible = false
				_resetWheelFunc()

				self._wheelDownFunc = runService.Heartbeat:Connect(function()
					local pos = self:GetMouseToWheelPos()
					self.Instance.Wheel.Image.Select.Position = UDim2.fromOffset(pos.X,pos.Y)

					self:SetColorFromPos(pos)
				end)

				self._wheelUpFunc_uis = uis.InputEnded:Connect(function(input,typing)
					if typing then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						_resetWheelFunc()
					end
				end)
			end)

			self.Instance.Wheel.Button.MouseButton1Up:Connect(function()
				self.Instance.Parent.Topbar.Button.Visible = true
				_resetWheelFunc()
			end)

			--value
			self._valueDownFunc = nil
			self._valueUpFunc_uis = nil

			local function _resetValueFunc()
				if self._valueDownFunc then
					self._valueDownFunc:Disconnect()
					self._valueDownFunc = nil
				end

				if self._valueUpFunc_uis then
					self._valueUpFunc_uis:Disconnect()
					self._valueUpFunc_uis = nil
				end
			end

			self.Instance.Right.Value.Button.MouseButton1Down:Connect(function()
				self.Instance.Parent.Topbar.Button.Visible = false

				_resetValueFunc()
				self._valueDownFunc = runService.Heartbeat:Connect(function()
					local pos = self:GetMouseToValuePos()
					self.Instance.Right.Value.Select.Position = UDim2.new(0,0,pos,0)

					local hue,saturation,value = self.Color:ToHSV()
					self.Color = Color3.fromHSV(self.CurrentHue or hue,self.CurrentSaturation or saturation,1 - pos)

					self:UpdateColor()
				end)

				self._valueUpFunc_uis = uis.InputEnded:Connect(function(input,typing)
					if typing then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						_resetValueFunc()
					end
				end)
			end)

			self.Instance.Right.Value.Button.MouseButton1Up:Connect(function()
				self.Instance.Parent.Topbar.Button.Visible = true
				_resetValueFunc()
			end)

			--update
			self:UpdateColor()

			--buttons
			self.Instance.Bottom.Buttons.Confirm.MouseButton1Down:Connect(function()
				self.Instance.Parent.FinishedEvent:Fire(self.Color)
				self:Destroy()
			end)

			self.Instance.Bottom.Buttons.Cancel.MouseButton1Down:Connect(function()
				self.Instance.Parent.CanceledEvent:Fire()
				self:Destroy()
			end)

			--properties
			for i,v in pairs(self.Instance.Parent.Properties.RGB:GetChildren()) do
				if v:IsA("Frame") then
					v.Frame.TextBox.FocusLost:Connect(function()
						local thisText = v.Frame.TextBox.Text
						if not tonumber(thisText) then
							v.Frame.TextBox.Text = "0"
						end

						local r = tonumber(self.Instance.Parent.Properties.RGB.R.Frame.TextBox.Text) or 0
						local g = tonumber(self.Instance.Parent.Properties.RGB.G.Frame.TextBox.Text) or 0
						local b = tonumber(self.Instance.Parent.Properties.RGB.B.Frame.TextBox.Text) or 0
						r,g,b = math.clamp(r,0,255),math.clamp(g,0,255),math.clamp(b,0,255)

						self:SetColor(Color3.fromRGB(r,g,b))
					end)
				end
			end

			for i,v in pairs(self.Instance.Parent.Properties.HSV:GetChildren()) do
				if v:IsA("Frame") then
					v.Frame.TextBox.FocusLost:Connect(function()
						local thisText = v.Frame.TextBox.Text
						if not tonumber(thisText) then
							v.Frame.TextBox.Text = "0"
						end

						local h = tonumber(self.Instance.Parent.Properties.HSV.H.Frame.TextBox.Text) or 0
						local s = tonumber(self.Instance.Parent.Properties.HSV.S.Frame.TextBox.Text) or 0
						local v = tonumber(self.Instance.Parent.Properties.HSV.V.Frame.TextBox.Text) or 0
						h,s,v = math.clamp(h,0,360),math.clamp(s,0,1),math.clamp(v,0,1)

						self:SetColor(Color3.fromHSV(h / 360,s,v))
					end)
				end
			end

			self.Instance.Parent.Content.Bottom.Hex.Frame.TextBox.FocusLost:Connect(function()
				local hex = self.Instance.Parent.Content.Bottom.Hex.Frame.TextBox.Text
				local success,errMsg = pcall(function()
					hex = Color3.fromHex(hex)
				end)

				if not success then
					hex = Color3.fromRGB(255,255,255)
				end

				self.Instance.Parent.Content.Bottom.Hex.Frame.TextBox.Text = hex:ToHex()
				self:SetColor(hex)
			end)

			--return
			return self
		end

		--create window
		function Color:Create()
			local sample = script.ColorWindow:Clone()
			sample.Position = self.Params.Position
			sample.Parent = self.Gui
			sample.Visible = false

			self.Instance = sample.Content

			--colors
			for i,v in pairs(sample:GetDescendants()) do
				if not self.Params.RoundedCorners and v:IsA("UICorner") and v.Parent.Name ~= "Select" then
					v:Destroy()
				end

				if v:IsA("TextLabel") or v:IsA("TextBox") or v:IsA("ImageButton") then
					v[(v:IsA("TextLabel") or v:IsA("TextBox")) and "TextColor3" or "ImageColor3"] = self.Params.TextColor
				end
			end

			sample.BackgroundColor3 = self.Params.PrimaryColor
			sample.Properties.BackgroundColor3 = self.Params.PrimaryColor

			sample.Properties.Line.BackgroundColor3 = self.Params.SecondaryColor
			sample.Content.Bottom.Hex.Frame.BackgroundColor3 = self.Params.SecondaryColor
			for i,v in pairs({sample.Properties.HSV,sample.Properties.RGB}) do
				for q,e in pairs(v:GetChildren()) do
					if e:IsA("Frame") then
						e.Frame.BackgroundColor3 = self.Params.SecondaryColor
					end
				end
			end

			sample.Topbar.BackgroundColor3 = self.Params.TopbarColor
			sample.Topbar.Frame.BackgroundColor3 = self.Params.TopbarColor

			--events
			self.Finished = sample.FinishedEvent.Event
			self.Canceled = sample.CanceledEvent.Event
			self.Updated = sample.UpdateEvent.Event


		end

		--destroy
		function Color:Destroy()
			if self.Instance and self.Instance.Parent then
				self.Instance.Parent:Destroy()
			end



			--value funcs
			if self._valueDownFunc then
				self._valueDownFunc:Disconnect()
				self._valueDownFunc = nil
			end

			if self._valueUpFunc_uis then
				self._valueUpFunc_uis:Disconnect()
				self._valueUpFunc_uis = nil
			end
		end

		--return position for wheel select based on mouse position
		function Color:GetMouseToWheelPos()
			local mousePos = Vector2.new(self.Mouse.X,self.Mouse.Y)
			local wheelPosition = self.Instance.Wheel.Image.AbsolutePosition
			local wheelSize = self.Instance.Wheel.Image.AbsoluteSize

			local toWheelPos = (mousePos - wheelPosition)
			local wheelMidPos = wheelPosition + (wheelSize / 2)
			local maxDist = (wheelSize.X / 2)

			local toMidPos = (wheelMidPos - mousePos)
			if toMidPos.Magnitude > maxDist then
				return (wheelSize / 2) - (toMidPos.Unit * maxDist)
			else
				return toWheelPos
			end
		end

		--return position for value select based on mouse position
		function Color:GetMouseToValuePos()
			local mousePos = Vector2.new(self.Mouse.X,self.Mouse.Y)
			local valuePosition = self.Instance.Right.Value.AbsolutePosition
			local valueSize = self.Instance.Right.Value.AbsoluteSize

			return math.clamp((mousePos.Y - valuePosition.Y) / valueSize.Y,0,1)
		end

		--update colors
		function Color:UpdateColor()
			self.Instance.Parent.UpdateEvent:Fire(self.Color)
			self.Instance.Bottom.Color.Frame.BackgroundColor3 = self.Color

			self.Instance.Parent.Properties.RGB.R.Frame.TextBox.Text = math.floor((self.Color.R * 255) + 0.5)
			self.Instance.Parent.Properties.RGB.G.Frame.TextBox.Text = math.floor((self.Color.G * 255) + 0.5)
			self.Instance.Parent.Properties.RGB.B.Frame.TextBox.Text = math.floor((self.Color.B * 255) + 0.5)

			local h,s,v = self.Color:ToHSV()
			self.Instance.Parent.Properties.HSV.H.Frame.TextBox.Text = math.floor((h * 360) + 0.5)
			self.Instance.Parent.Properties.HSV.S.Frame.TextBox.Text = roundToHundredths(s)
			self.Instance.Parent.Properties.HSV.V.Frame.TextBox.Text = roundToHundredths(v)

			local hex = self.Color:ToHex()
			self.Instance.Parent.Content.Bottom.Hex.Frame.TextBox.Text = string.format("#%s",string.lower(hex))
		end

		--set color from pos and update wheel and value selects
		function Color:SetColorFromPos(pos : Vector2)
			local wheelSize = self.Instance.Wheel.Image.AbsoluteSize
			local wheelMidPos = (wheelSize / 2)

			local toMidPos = (wheelMidPos - pos)
			local maxDist = (wheelSize.X / 2)

			local dist = math.min(toMidPos.Magnitude,maxDist)

			--thanks for egomoose for the code on the roblox devforum
			local phi,len = toPolar(toMidPos * Vector2.new(-1,1));
			local hue,saturation = radToDeg(phi) / 360,len / maxDist;
			hue,saturation = math.clamp(hue,0,1),math.clamp(saturation,0,1)

			local _hue,_saturation,value = self.Color:ToHSV()
			self.Color = Color3.fromHSV(hue,saturation,value)

			self:UpdateColor()
			self:SetValueGradient(hue,saturation)
		end

		--set gradient for value slider
		function Color:SetValueGradient(hue : number,saturation : number)
			self.CurrentSaturation = saturation
			self.CurrentHue = hue

			local color = Color3.fromHSV(hue,saturation,1)
			self.Instance.Right.Value.UIGradient.Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0,color),
				ColorSequenceKeypoint.new(1,Color3.fromRGB(0,0,0))
			})
		end

		--set color
		function Color:SetColor(color : Color3)
			local hue,saturation,value = color:ToHSV()
			self.Color = color

			local wheelSize = self.Instance.Wheel.Image.AbsoluteSize
			local wheelMidPos = (wheelSize / 2)
			local maxDist = (wheelSize.X / 2)

			local vector = Vector2.new(0.5,0.5)

			local hueVector = Vector2.new(-1,0)
			hueVector = rotateVector(hueVector,hue * -360)
			hueVector = rotateVector(hueVector,180)

			vector -= hueVector * saturation * 0.5
			self.Instance.Wheel.Image.Select.Position = UDim2.fromScale(vector.X,vector.Y)
			self.Instance.Right.Value.Select.Position = UDim2.new(0,0,1 - value,0)

			self:UpdateColor()
			self:SetValueGradient(hue,saturation)
		end

		return Color
	end;
};
-- Blazed.LocalScript
local function C_c5()
	local script = BLAZED["c5"];
	local Library = require(script.Parent.Library)

	local Window = Library.CreateLib("TITLE", "DarkTheme")

	Window:SetLanding("2.2", ".gg/epik", {
		"addes water",
		"added lock amaster",
		"addes water",
		"added lock amaster",
		"addes water",
		"added lock amaster"
	})
	--Plr tabs (done)
	local PlrTab = Window:NewTab("Players Hacks")
	local PlrSection = PlrTab:NewSection("Hacks")

	PlrSection:NewButton("Reset", "Reser ur character", function()
		game.Players.LocalPlayer.Character.Head:Destroy()
	end)

	PlrSection:NewToggle("Disable Gravity", "ToggleInfo", function(state)
		if state then
			workspace.Gravity = 0
		else
			workspace.Gravity = 196.2
		end
	end)

	PlrSection:NewSlider("Speed", "SliderInfo", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
	end)

	PlrSection:NewSlider("Jump Power", "SliderInfo", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = s
	end)

	-- Others
	local OthersTab = Window:NewTab("Others")
	local OthersSection = OthersTab:NewSection("Scripts")

	OthersSection:NewButton("Infinite yield", "ButtonInfo", function()
		loadstring(game:HttpGet("https://cdn.wearedevs.net/scripts/Infinite%20Yield.txt"))()
	end)

	OthersSection:NewKeybind("togle ui", "water", Enum.KeyCode.F, function()
		Window:ToggleUI()
	end)

	--My first Epic Gui Hack

end;
task.spawn(C_c5);

return BLAZED["1"], require;
